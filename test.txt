name: IBPS deployment

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on:
     group: rakbank-self-hosted-runner
     labels: rakdeh3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Debug Working Directory
      run: |
       ls -al      

    - name: Make deploy.sh and rollback.sh executable
      run: |
        chmod +x deploy.sh rollback.sh      

    - name: Run Ansible Playbook
      env:
        TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
      run: |
        cd ${{ github.workspace }}
          
        # Debugging: Print the contents of the directory
        ls -al
        ansible-playbook -b -vvv --extra-vars 'target=ANT3CASAPPS01' -i inventory.ini ./playbook/IBPS-deployment.yml
        #ansible-playbook -b -vvv --extra-vars 'target=ANT3CASAPPS01 deployment_directory=/ansible/GITHUB_RUNNER/actions-runner9/_work/IBPS-Deployment/IBPS-Deployment' ./playbook/IBPS-deployment.yml

===========================================
using playbook

- hosts: '{{ target }}'
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
    - name: Execute deployment script
      become_user: root
      shell: "/bin/bash -c 'cd {{ deployment_directory }} && ./deploy.sh'"
      args:
        chdir: "{{ deployment_directory }}"
      register: deploy_result
      ignore_errors: yes

    - name: Rollback on Deployment Failure
      become_user: root
      shell: "/bin/bash -c 'cd {{ deployment_directory }} && ./rollback.sh change.log'"
      args:
        chdir: "{{ deployment_directory }}"
      when: deploy_result|failed  
  #roles:
   #   - IBPS-deployment

===========================================

using ansible.cfg

[defaults]
host_key_checking=False
deprecation_warnings=False
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
remote_tmp=/tmp
inventory=hosts.cfg
roles_path=roles/
comment_warnings=False
command_warnings=False
interpreter_python=auto
vault_password_file=group_vars/vault_key.yml
ANSIBLE_DEPRECATION_WARNINGS=False
ANSIBLE_COMMAND_WARNINGS=False

==================================

using host.cfg

[all:vars]
ansible_user=ITDEVTRA
ansible_ssh_port=22

[target_jb1]
ANT3CASAPPS01 ansible_ssh_host=10.15.13.148

===================================

using inventory.ini

[all:vars]
ansible_user=ITDEVTRA
ansible_ssh_port=22

[target_jb1]
ANT3CASAPPS01 ansible_ssh_host=10.15.13.148
====================================

using deploy.sh
process_line() {
  local filename
  local destination
  
  # Split the line into filename and destination using a comma as the delimiter 
  IFS=',' read -r filename destination <<< "$1"

  # Perform actions based on the values
  echo "Deploying $filename to $destination"

  # Check if either the filename or destination is empty
  if [ -z "$filename" ] || [ -z "$destination" ]; then
    echo "Error: Empty filename or destination in line: $1"
    return
  fi

  # Backup the existing file or directory at the destination
  if [ -e "$destination" ]; then
    backup_dir="/ibm/IBM-CAS/BACKUP_RELEASE"
    mkdir -p "$backup_dir"
    backup_file="$backup_dir/$(basename "$destination")_backup_$(date +'%Y%m%d%H%M%S')"
    mv "$destination" "$backup_file"
    echo "Backed up $destination to $backup_file"

    # Add the backup details to the change.log file
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Backed up $destination to $backup_file" >> change.log
  else
    echo "File or directory $destination not found, skipping backup"
  fi

  # Download the ZIP file from GitHub Packages using curl
  # Replace GITHUB_TOKEN with your GitHub token or credentials
  curl -H "Authorization: token TOKEN_GITHUB" -o "$filename" -L "https://maven.pkg.github.com/rakbank-internal/IBPS-Deployment/$filename"

  if [ $? -eq 0 ]; then
    echo "Downloaded $filename from GitHub Packages"

    # Unzip the file
    unzip -q "$filename" -d "$destination"

    if [ $? -eq 0 ]; then
      echo "Extracted and deployed $filename to $destination"
    else
      echo "Error extracting and deploying $filename to $destination"
    fi

    # Add the deployment details to the change.log file
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Deployed $filename to $destination" >> change.log
  else
    echo "Error downloading $filename from GitHub Packages"
  fi
}

# Check if the release.txt file exists
if [ -e "release.txt" ]; then
  # Read each line from the release.txt file
  while IFS= read -r line; do
    # Skip empty lines and lines starting with #
    if [[ -n "$line" && "$line" != "#"* ]]; then
      process_line "$line"
    fi
  done < "release.txt"
else
  echo "release.txt file not found"
fi

==================================
using rollback.sh

#!/bin/bash

rollback_change_log() {
  local change_log="$1"
  local rollback_dir="/home/ubuntu/backup"

  # Check if the change.log file exists
  if [ -e "$change_log" ]; then
    while IFS= read -r line; do
      # Split the line into components (source, destination, timestamp, etc.)
      IFS=',' read -r source destination timestamp <<< "$line"

      # Check if the source file exists in the backup directory
      if [ -e "$rollback_dir/$source" ]; then
        # Perform the rollback
        echo "Rolling back $source to $destination"
        cp "$rollback_dir/$source" "$destination"

        if [ $? -eq 0 ]; then
          echo "Rolled back $source to $destination"
        else
          echo "Error rolling back $source to $destination"
        fi
      else
        echo "Backup file $source not found, skipping rollback"
      fi
    done < "$change_log"
  else
    echo "Change log file not found"
  fi
}

# Check if the change.log file is provided as an argument
if [ $# -eq 1 ]; then
  rollback_change_log "$1"
else
  echo "Usage: $0 <change.log>"
fi

