using IBPS.yml workflow
name: IBPS deployment

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on:
     group: rakbank-self-hosted-runner
     labels: rakdeh3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Debug Working Directory
      run: |
       ls -al      

    - name: Make deploy.sh and rollback.sh executable
      run: |
        chmod +x deploy.sh rollback.sh      

    - name: Run Ansible Playbook
      env:
        TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
      run: |
        cd ${{ github.workspace }}
          
        # Debugging: Print the contents of the directory
        ls -al
        ansible-playbook -b -vvv --extra-vars 'target=ANT3CASAPPS01' -i inventory.ini ./playbook/IBPS-deployment.yml
        #ansible-playbook -b --extra-vars 'target=ANT3CASAPPS01 deployment_directory=/ibm/IBM-CAS/WebSphere/AppServer/profiles/AppSrv01/installedApps/ANT2CASAPPS01Node01Cell' ./playbook/IBPS-deployment.yml
------------------------------
using IBPS-deployment.yml playbook
- hosts: '{{ target }}'
  become: yes
  become_method: sudo
  gather_facts: no
  tasks:
    - name: Execute deployment script
      become_user: root
      shell: "/bin/bash -c 'cd {{ deployment_directory }} && ./deploy.sh'"
      args:
        chdir: "{{ deployment_directory }}"
      register: deploy_result
      ignore_errors: yes

    - name: Rollback on Deployment Failure
      become_user: root
      shell: "/bin/bash -c 'cd {{ deployment_directory }} && ./rollback.sh change.log'"
      args:
        chdir: "{{ deployment_directory }}"
      when: deploy_result|failed  
  -------------------------------
using deploy.sh - here it seems i have to download and extract the release.zip file from github packages
and release.zip file contains application file and release.txt file
release.txt file contains application file name and its destination location 
and this script will work for copy the application file to destination

process_line() {
  local filename
  local destination
  
  # Split the line into filename and destination using a comma as the delimiter 
  IFS=',' read -r filename destination <<< "$1"

  # Perform actions based on the values
  echo "Deploying $filename to $destination"

  # Check if either the filename or destination is empty
  if [ -z "$filename" ] || [ -z "$destination" ]; then
    echo "Error: Empty filename or destination in line: $1"
    return
  fi

  # Backup the existing file or directory at the destination
  if [ -e "$destination" ]; then
    backup_dir="/ibm/IBM-CAS/BACKUP_RELEASE"
    mkdir -p "$backup_dir"
    backup_file="$backup_dir/$(basename "$destination")_backup_$(date +'%Y%m%d%H%M%S')"
    mv "$destination" "$backup_file"
    echo "Backed up $destination to $backup_file"

    # Add the backup details to the change.log file
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Backed up $destination to $backup_file" >> change.log
  else
    echo "File or directory $destination not found, skipping backup"
  fi

  # Download the ZIP file from GitHub Packages using curl
  # Replace GITHUB_TOKEN with your GitHub token or credentials
  curl -H "Authorization: token TOKEN_GITHUB" -o "$filename" -L "https://maven.pkg.github.com/rakbank-internal/IBPS-Deployment/$filename"

  if [ $? -eq 0 ]; then
    echo "Downloaded $filename from GitHub Packages"

    # Unzip the file
    unzip -q "$filename" -d "$destination"

    if [ $? -eq 0 ]; then
      echo "Extracted and deployed $filename to $destination"
    else
      echo "Error extracting and deploying $filename to $destination"
    fi

    # Add the deployment details to the change.log file
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Deployed $filename to $destination" >> change.log
  else
    echo "Error downloading $filename from GitHub Packages"
  fi
}

# Check if the release.txt file exists
if [ -e "release.txt" ]; then
  # Read each line from the release.txt file
  while IFS= read -r line; do
    # Skip empty lines and lines starting with #
    if [[ -n "$line" && "$line" != "#"* ]]; then
      process_line "$line"
    fi
  done < "release.txt"
else
  echo "release.txt file not found"
fi

--------------------------------
using rollback.sh
#!/bin/bash

rollback_change_log() {
  local change_log="$1"
  local rollback_dir="/home/ubuntu/backup"

  # Check if the change.log file exists
  if [ -e "$change_log" ]; then
    while IFS= read -r line; do
      # Split the line into components (source, destination, timestamp, etc.)
      IFS=',' read -r source destination timestamp <<< "$line"

      # Check if the source file exists in the backup directory
      if [ -e "$rollback_dir/$source" ]; then
        # Perform the rollback
        echo "Rolling back $source to $destination"
        cp "$rollback_dir/$source" "$destination"

        if [ $? -eq 0 ]; then
          echo "Rolled back $source to $destination"
        else
          echo "Error rolling back $source to $destination"
        fi
      else
        echo "Backup file $source not found, skipping rollback"
      fi
    done < "$change_log"
  else
    echo "Change log file not found"
  fi
}

# Check if the change.log file is provided as an argument
if [ $# -eq 1 ]; then
  rollback_change_log "$1"
else
  echo "Usage: $0 <change.log>"
fi
-------------------

