#!/bin/bash

Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

# Remove existing release directory
rm -rf "$Profile_home/release"

# Extract the zip file to the release directory
unzip -q "$Profile_home/$zip_file_name" -d "$Profile_home"

# List the contents of the release directory
ls -la "$Profile_home/release"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Create a backup directory with a timestamp
    backup_timestamp=$(date +'%Y%m%d%H%M%S')
    backup_directory="$backup_location/backup-$backup_timestamp"
    mkdir -p "$backup_directory"

    # Copy release.txt file into backup directory
    cp "$Profile_home/release/release.txt" "$backup_directory"

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if both app_name and app_targeted_location are not empty
        if [ -n "$app_name" ] && [ -n "$app_targeted_location" ]; then
            # Construct paths for old deployment files and backup location
            old_deployment_path="$app_targeted_location"
            backup_path="$backup_directory/$app_name"

            # Copy old deployment files to backup location
            cp -r "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"

            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            #targeted_path="$app_targeted_location"

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$app_targeted_location"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $app_targeted_location"
        fi
    done <<< "$release_content"
fi

ls -la "/ibm/IBM-CAS/WebSphere"
ls -la "/ibm/IBM-CAS/WebSphere/targeted_location3"
========================
#!/bin/bash

Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"
targeted_location="$5"

rm -rf "$Profile_home/release"

# Use unzip with -u option to update existing files
unzip -q "$Profile_home/$zip_file_name" -d "$Profile_home"

ls -la "$Profile_home/release"

# Backup old deployment files for each application with timestamp
backup_location="$backup_location"  # Use the variable passed from Ansible

# Create a backup directory with a timestamp
backup_timestamp=$(date +'%Y%m%d%H%M%S')
backup_directory="$backup_location/backup-$backup_timestamp"
mkdir -p "$backup_directory"

# Iterate through each application in the release directory
for app_name in "$Profile_home"/release/*; do
    if [ -d "$app_name" ]; then
        # Extract the application name from the path
        app_name=$(basename "$app_name")

        # Log the targeted path
        echo "Targeted location for $app_name: $targeted_location"

        # Define paths for old deployment files and backup location
        old_deployment_path="$targeted_location/$app_name"
        backup_path="$backup_directory/$app_name"

        # Backup old deployment files to backup location
        if [ -d "$old_deployment_path" ]; then
            cp -r "$old_deployment_path" "$backup_path"
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"
        fi

        # Define paths for new deployment files and targeted location
        new_deployment_path="$Profile_home/release/$app_name"

        # Copy new deployment files to targeted location
        cp -r "$new_deployment_path" "$targeted_location"

        # Print information about the copy
        echo "Copy: $app_name - $new_deployment_path -> $targeted_location"
    fi
done
===================

#!/bin/bash

Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

# Remove existing release directory
rm -rf "$Profile_home/release"

# Extract the zip file to the release directory
unzip -q "$Profile_home/$zip_file_name" -d "$Profile_home"

# List the contents of the release directory
ls -la "$Profile_home/release"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Create a backup directory with a timestamp
    backup_timestamp=$(date +'%Y%m%d%H%M%S')
    backup_directory="$backup_location/backup-$backup_timestamp"
    mkdir -p "$backup_directory"

    # Copy release.txt file into backup directory
    cp "$Profile_home/release/release.txt" "$backup_directory"

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if both app_name and app_targeted_location are not empty
        if [ -n "$app_name" ] && [ -n "$app_targeted_location" ]; then
            # Construct paths for old deployment files and backup location
            old_deployment_path="$app_targeted_location"
            backup_path="$backup_directory/$app_name"

            # Copy old deployment files to backup location
            cp -r "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"

            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            
            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$app_targeted_location"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $app_targeted_location"
        fi
    done <<< "$release_content"
fi

================

TASK [IBPS-deployment : Run deploy on Target Server] ***************************
task path: /ansible/GITHUB_RUNNER/actions-runner10/_work/ibps-was-ansible-cd/ibps-was-ansible-cd/roles/IBPS-deployment/tasks/main-deploy.yml:24
<10.15.13.148> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.13.148> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a 10.15.13.148 '/bin/sh -c '"'"'( umask 77 && mkdir -p "` echo /tmp `"&& mkdir /tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201 && echo ansible-tmp-1708094895.4559195-2980286-247230593676201="` echo /tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201 `" ) && sleep 0'"'"''
<10.15.13.148> (0, b'ansible-tmp-1708094895.4559195-2980286-247230593676201=/tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201\n', b'')
Using module file /usr/lib/python3.6/site-packages/ansible/modules/commands/command.py
<10.15.13.148> PUT /home/itdevtra/.ansible/tmp/ansible-local-2979395szj3ss4c/tmp1qwfwro5 TO /tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201/AnsiballZ_command.py
<10.15.13.148> SSH: EXEC sftp -b - -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a '[10.15.13.148]'
<10.15.13.148> (0, b'sftp> put /home/itdevtra/.ansible/tmp/ansible-local-2979395szj3ss4c/tmp1qwfwro5 /tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201/AnsiballZ_command.py\n', b'')
<10.15.13.148> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.13.148> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a 10.15.13.148 '/bin/sh -c '"'"'chmod u+x /tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201/ /tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201/AnsiballZ_command.py && sleep 0'"'"''
<10.15.13.148> (0, b'', b'')
<10.15.13.148> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.13.148> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a -tt 10.15.13.148 '/bin/sh -c '"'"'/usr/bin/python /tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201/AnsiballZ_command.py && sleep 0'"'"''
<10.15.13.148> (0, b'\r\n{"changed": true, "end": "2024-02-16 18:49:44.920235", "stdout": "total 28\\ndrwxrwxr-x 6 itdevtra itdevtra 4096 Feb 16 18:49 .\\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 18:49 ..\\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 newgenapp_jar.ear\\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 ofme_ejb.ear\\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 omniapp_ejb.ear\\n-rw-rw-r-- 1 itdevtra itdevtra  225 Feb 16 18:32 release.txt\\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 WFS.ear\\nnewgenapp_jar.ear,/ibm/IBM-CAS/WebSphere/targeted_location6\\r\\nofme_ejb.ear,/ibm/IBM-CAS/WebSphere/targeted_location6\\r\\nomniapp_ejb.ear,/ibm/IBM-CAS/WebSphere/targeted_location6\\r\\nWFS.ear,/ibm/IBM-CAS/WebSphere/targeted_location6\\nBackup: newgenapp_jar.ear - /ibm/IBM-CAS/WebSphere/targeted_location6\\r -> /ibm/IBM-CAS/WebSphere/backup/backup-20240216184944/newgenapp_jar.ear\\nCopy: newgenapp_jar.ear - /ibm/IBM-CAS/WebSphere/deploy_script/release/newgenapp_jar.ear -> /ibm/IBM-CAS/
<10.15.13.148> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.13.148> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a 10.15.13.148 '/bin/sh -c '"'"'rm -f -r /tmp/ansible-tmp-1708094895.4559195-2980286-247230593676201/ > /dev/null 2>&1 && sleep 0'"'"''
<10.15.13.148> (0, b'', b'')
changed: [ANT3CASAPPS01] => {
    "changed": true,
    "cmd": "cd /ibm/IBM-CAS/WebSphere/deploy_script && ./deploy.sh /ibm/IBM-CAS/WebSphere/deploy_script https://maven.pkg.github.com/rakbank-internal/ibps-was-ansible-cd/Rak/IBPS/release/1.0.0.14/release-1.0.0.14.zip release-1.0.0.14.zip /ibm/IBM-CAS/WebSphere/backup",
    "delta": "0:00:00.394720",
    "end": "2024-02-16 18:49:44.920235",
    "invocation": {
        "module_args": {
            "_raw_params": "cd /ibm/IBM-CAS/WebSphere/deploy_script && ./deploy.sh /ibm/IBM-CAS/WebSphere/deploy_script https://maven.pkg.github.com/rakbank-internal/ibps-was-ansible-cd/Rak/IBPS/release/1.0.0.14/release-1.0.0.14.zip release-1.0.0.14.zip /ibm/IBM-CAS/WebSphere/backup",
            "_uses_shell": true,
            "argv": null,
            "chdir": null,
            "creates": null,
            "executable": null,
            "removes": null,
            "stdin": null,
            "stdin_add_newline": true,
            "strip_empty_ends": true,
            "warn": false
        }
    },
    "rc": 0,
    "start": "2024-02-16 18:49:44.525515",
    "stderr": "cp: cannot stat ‘/ibm/IBM-CAS/WebSphere/targeted_location6\\r’: No such file or directory",
    "stderr_lines": [
        "cp: cannot stat ‘/ibm/IBM-CAS/WebSphere/targeted_location6\\r’: No such file or directory"
    ],
    "stdout": "total 28\ndrwxrwxr-x 6 itdevtra itdevtra 4096 Feb 16 18:49 .\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 18:49 ..\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 newgenapp_jar.ear\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 ofme_ejb.ear\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 omniapp_ejb.ear\n-rw-rw-r-- 1 itdevtra itdevtra  225 Feb 16 18:32 release.txt\ndrwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 WFS.ear\nnewgenapp_jar.ear,/ibm/IBM-CAS/WebSphere/targeted_location6\r\nofme_ejb.ear,/ibm/IBM-CAS/WebSphere/targeted_location6\r\nomniapp_ejb.ear,/ibm/IBM-CAS/WebSphere/targeted_location6\r\nWFS.ear,/ibm/IBM-CAS/WebSphere/targeted_location6\nBackup: newgenapp_jar.ear - /ibm/IBM-CAS/WebSphere/targeted_location6\r -> /ibm/IBM-CAS/WebSphere/backup/backup-20240216184944/newgenapp_jar.ear\nCopy: newgenapp_jar.ear - /ibm/IBM-CAS/WebSphere/deploy_script/release/newgenapp_jar.ear -> /ibm/IBM-CAS/WebSphere/targeted_location6\r\nBackup: ofme_ejb.ear - /ibm/IBM-CAS/WebSphere/targeted_locati
    "stdout_lines": [
        "total 28",
        "drwxrwxr-x 6 itdevtra itdevtra 4096 Feb 16 18:49 .",
        "drwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 18:49 ..",
        "drwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 newgenapp_jar.ear",
        "drwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 ofme_ejb.ear",
        "drwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 omniapp_ejb.ear",
        "-rw-rw-r-- 1 itdevtra itdevtra  225 Feb 16 18:32 release.txt",
        "drwxrwxr-x 3 itdevtra itdevtra 4096 Feb 16 15:53 WFS.ear",
        "newgenapp_jar.ear,/ibm/IBM-CAS/WebSphere/targeted_location6",
        "ofme_ejb.ear,/ibm/IBM-CAS/WebSphere/targeted_location6",
        "omniapp_ejb.ear,/ibm/IBM-CAS/WebSphere/targeted_location6",
        "WFS.ear,/ibm/IBM-CAS/WebSphere/targeted_location6",
        "Backup: newgenapp_jar.ear - /ibm/IBM-CAS/WebSphere/targeted_location6",
        " -> /ibm/IBM-CAS/WebSphere/backup/backup-20240216184944/newgenapp_jar.ear",
        "Copy: newgenapp_jar.ear - /ibm/IBM-CAS/WebSphere/deploy_script/release/newgenapp_jar.ear -> /ibm/IBM-CAS/WebSphere/targeted_location6",
        "Backup: ofme_ejb.ear - /ibm/IBM-CAS/WebSphere/targeted_location6",
        " -> /ibm/IBM-CAS/WebSphere/backup/backup-20240216184944/ofme_ejb.ear",
        "Copy: ofme_ejb.ear - /ibm/IBM-CAS/WebSphere/deploy_script/release/ofme_ejb.ear -> /ibm/IBM-CAS/WebSphere/targeted_location6",
        "Backup: omniapp_ejb.ear - /ibm/IBM-CAS/WebSphere/targeted_location6",
        " -> /ibm/IBM-CAS/WebSphere/backup/backup-20240216184944/omniapp_ejb.ear",
        "Copy: omniapp_ejb.ear - /ibm/IBM-CAS/WebSphere/deploy_script/release/omniapp_ejb.ear -> /ibm/IBM-CAS/WebSphere/targeted_location6",
        "Backup: WFS.ear - /ibm/IBM-CAS/WebSphere/targeted_location6 -> /ibm/IBM-CAS/WebSphere/backup/backup-20240216184944/WFS.ear",
        "Copy: WFS.ear - /ibm/IBM-CAS/WebSphere/deploy_script/release/WFS.ear -> /ibm/IBM-CAS/WebSphere/targeted_location6",
        "total 64",
        "drwxrwxrwx 16 root     root     4096 Feb 16 18:49 .",
        "drwxrwxrwx  5 root     root     4096 May  9  2022 ..",
        "drwxrwxrwx 38 root     root     4096 Jan 12 11:50 AppServer",
        "drwxrwxr-x 26 itdevtra itdevtra 4096 Feb 16 18:49 backup",
        "drwxrwxr-x  3 itdevtra itdevtra 4096 Feb 16 18:49 deploy_script",
        "drwxrwxrwx 16 root     root     4096 May  9  2022 Plugins",
        "drwxrwxr-x  6 itdevtra itdevtra 4096 Feb 15 14:58 targeted_location",
        "drwxrwxr-x  6 itdevtra itdevtra 4096 Feb 16 16:28 targeted_location1",
        "drwxrwxr-x  5 itdevtra itdevtra 4096 Feb 16 16:41 targeted_location2",
        "drwxrwxr-x  5 itdevtra itdevtra 4096 Feb 16 17:10 targeted_location3",
        "drwxrwxr-x  6 itdevtra itdevtra 4096 Feb 16 17:35 targeted_location4",
        "drwxrwxrwx  3 itdevtra itdevtra 4096 Feb 16 18:07 targeted_location5",
        "drwxrwxr-x  6 itdevtra itdevtra 4096 Feb 16 18:14 targeted_location5",
        "drwxrwxrwx  3 itdevtra itdevtra 4096 Feb 16 18:49 targeted_location6",
        "drwxrwxr-x  5 itdevtra itdevtra 4096 Feb 16 18:49 targeted_location6",
        "drwxrwxrwx 11 root     root     4096 May  9  2022 Toolbox",
        "total 12",
        "drwxrwxrwx  3 itdevtra itdevtra 4096 Feb 16 18:49 .",
        "drwxrwxrwx 16 root     root     4096 Feb 16 18:49 ..",
        "drwxrwxr-x  3 itdevtra itdevtra 4096 Feb 16 18:49 WFS.ear"
    ]
}
============================

#!/bin/bash

Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

# Remove existing release directory
rm -rf "$Profile_home/release"

# Extract the zip file to the release directory
unzip -q "$Profile_home/$zip_file_name" -d "$Profile_home"

# List the contents of the release directory
ls -la "$Profile_home/release"

# Read the content of release.txt and remove any leading/trailing whitespace characters
release_content=$(sed 's/^[[:space:]]*//;s/[[:space:]]*$//' "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Create a backup directory with a timestamp
    backup_timestamp=$(date +'%Y%m%d%H%M%S')
    backup_directory="$backup_location/backup-$backup_timestamp"
    mkdir -p "$backup_directory"

    # Copy release.txt file into backup directory
    cp "$Profile_home/release/release.txt" "$backup_directory"

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if both app_name and app_targeted_location are not empty
        if [ -n "$app_name" ] && [ -n "$app_targeted_location" ]; then
            # Construct paths for old deployment files and backup location
            old_deployment_path="$app_targeted_location"
            backup_path="$backup_directory/$app_name"

            # Copy old deployment files to backup location
            cp -r "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"

            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$app_targeted_location"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $app_targeted_location"
        fi
    done <<< "$release_content"
fi


ls -la "/ibm/IBM-CAS/WebSphere"
ls -la "/ibm/IBM-CAS/WebSphere/targeted_location6"
==================
#!/bin/bash

targeted_location="$1"
backup_location="$2"

# Find the latest backup directory with date and time
latest_backup=$(ls -td "$backup_location"/backup-* | head -n 1)

if [ -z "$latest_backup" ]; then
    echo "No backup directories found."
    exit 1
fi

echo "Latest backup directory: $latest_backup"

# List the contents of the latest backup directory
ls -la "$latest_backup"

# Iterate through each application in the latest backup directory
for app_name in "$latest_backup"/*; do
    if [ -d "$app_name" ]; then
        # Extract the application name from the path
        app_name=$(basename "$app_name")

        # Log the targeted path
        echo "Targeted location for $app_name: $targeted_location"

        # Define paths for old deployment files and backup location
        old_deployment_path="$latest_backup/$app_name"

        # Copy files from backup to targeted location
        cp -r "$old_deployment_path" "$targeted_location"

        # Print information about the copy
        echo "Copy: $app_name - $old_deployment_path -> $targeted_location"
    fi
done
======================

#!/bin/bash
backup_location="$1"  # Taking backup location as an argument

# Find the latest backup directory with date and time
latest_backup=$(ls -td "$backup_location"/backup-* | head -n 1)

if [ -z "$latest_backup" ]; then
    echo "No backup directories found."
    exit 1
fi

echo "Latest backup directory: $latest_backup"

# List the contents of the latest backup directory
ls -la "$latest_backup"

# Read the content of release.txt and remove any leading/trailing whitespace characters
release_content=$(sed 's/^[[:space:]]*//;s/[[:space:]]*$//' "$latest_backup/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Check if release_content is not empty
if [ -n "$release_content" ]; then
    # Iterate through each line in release.txt
    while IFS=, read -r app_name app_targeted_location; do
        # Check if both app_name and app_targeted_location are not empty
        if [ -n "$app_name" ] && [ -n "$app_targeted_location" ]; then
            # Log the targeted path
            echo "Targeted location for $app_name: $app_targeted_location"

            # Define paths for old deployment files and backup location
            old_deployment_path="$latest_backup/$app_name"

            # Copy files from backup to targeted location
            cp -r "$old_deployment_path" "$app_targeted_location"

            # Print information about the copy
            echo "Copy: $app_name - $old_deployment_path -> $app_targeted_location"
        fi
    done <<< "$release_content"
else
    echo "No content found in release.txt."
fi
