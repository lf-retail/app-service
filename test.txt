I have completed the IBPS deployment on below UAT2 cluster servers. This involved downloading the release artifact from Github Releases and copying it onto the targeted servers from the Runner machine. Additionally, I ensured that the application files within the release artifact were copied to their respective locations as specified in the release.txt file.

Here are the details for the two servers:

Application: ANTIBPSAPP1
IP: 10.15.11.209

Application: ANTIBPSAPP2
IP: 10.15.11.210

Additionally, Today had a discussion with Devdutta Singh, Anisur Rahman Abdul Kalam Shaikh, and Hritik Kounsal regarding the installation of WAR files in WAS,. We discussed the necessary steps to follow if there are any WAR files within the release artifact. I'm scheduled to commence this work on Monday.

Please feel free to reach out if there are any additional requirements or if I've overlooked anything.
======================

Could you please share the test environment details needed to test the script for installing WAR files in WAS?
============

#!/bin/bash

# Server details (replace with your actual values)
WAS_HOST="localhost"
WAS_PORT="8080"
WAS_ADMIN_USER="admin"
WAS_ADMIN_PASSWORD="password"

# WAR file path (replace with your actual path)
WAR_FILE_PATH="/path/to/your/war.war"

# Application name (replace with your desired name)
APP_NAME="your_application_name"

# Context Root (replace with your desired context root)
CONTEXT_ROOT="your_app_context_root"

# Connect to WebSphere administration console
AdminConfig.connect("$WAS_HOST:$WAS_PORT", "-user $WAS_ADMIN_USER", "-password $WAS_ADMIN_PASSWORD")

# Check if application already exists
if [ $(AdminConfig.isAppAvailable "$APP_NAME") = "true" ]
then
  echo "Application $APP_NAME already exists. Skipping installation."
else
  # Install the application with detailed options
  AdminApp.installApplication("$WAR_FILE_PATH", "$APP_NAME", "-detailed")

  # Map shared libraries (replace 'your_shared_library' with actual library name)
  AdminConfig.assignSharedLibraryToApp("$APP_NAME", "your_shared_library")

  # Set context root
  AdminConfig.setContextRootForWebModule("[$APP_NAME 0]", "$CONTEXT_ROOT")

  # Save configuration changes
  AdminConfig.save()
fi

# Disconnect from WebSphere administration console
AdminConfig.disconnect()

echo "WAR deployment script complete."
==================

#!/bin/bash

# Server details (adapt these variables to your environment)
WAS_HOST="localhost"
WAS_PORT="9043" # Change to your WAS administrative port, often 9043 for HTTPS
WAS_ADMIN_USER="admin"
WAS_ADMIN_PASSWORD="password"

# WAR file and application details
WAR_FILE_PATH="/path/to/your/war.war"
APP_NAME="your_application_name"
CONTEXT_ROOT="your_app_context_root"
SHARED_LIB="your_shared_library"

# Path to wsadmin.sh (adjust for your WAS installation)
WSADMIN="/path/to/WebSphere/AppServer/profiles/YourProfile/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="
# Connect to WebSphere Application Server
AdminConfig.connect('$WAS_ADMIN_USER', '$WAS_ADMIN_PASSWORD')

# Check if the application already exists
if AdminApp.list().find('$APP_NAME') != -1:
    print('Application $APP_NAME already exists. Skipping installation.')
else:
    # Install the application
    AdminApp.install('$WAR_FILE_PATH', '[ -appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]] ]')
    # Map shared libraries (Optional: Adjust or remove according to your requirements)
    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')
    # Save configuration changes
    AdminConfig.save()

# Disconnect from the server
AdminConfig.disconnect()
"

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi
=============

WAS_HOST: The hostname or IP address of your WebSphere Application Server. This is where you want to deploy the WAR file. If you're running the script on the same machine as the WAS, this can be localhost. Otherwise, it should be the actual network address of the server.

WAS_PORT: The administrative port number used by your WebSphere Application Server for management purposes. This is often set to 9043 for HTTPS connections in default installations, but it may differ based on your server's configuration.

WAS_ADMIN_USER: The username for an administrative account on your WebSphere Application Server. This account will be used to execute the deployment and other administrative commands.

WAS_ADMIN_PASSWORD: The password for the administrative account specified by WAS_ADMIN_USER.

WAR_FILE_PATH: The full filesystem path to the WAR file you want to deploy. This path must be accessible from the machine where you run the script.

APP_NAME: The name you want to assign to the application once it's deployed on WebSphere. This should be a unique name that does not clash with existing applications on the server.

CONTEXT_ROOT: The context root for the deployed application. This is the path segment in the URL used to access the application.

SHARED_LIB: The name of any shared library that the application should be associated with. If your application doesn't use a shared library or if this is not relevant, you may need to adjust the script accordingly.
