#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Extract release version from the zip file name (assuming the format is release-X.Y.Z.zip)
release_version=$(echo "$zip_file_name" | grep -oP 'release-\K[0-9]+\.[0-9]+\.[0-9]+')
release_dir="release2-$release_version"  # Modify the directory name to release2

# Create a temporary directory for extraction
temp_dir=$(mktemp -d)

# Extract the new release to the temporary directory
unzip -q "$Profile_home/$zip_file_name" -d "$temp_dir"

# If the release directory already exists, merge the contents
if [ -d "$Profile_home/$release_dir" ]; then
    echo "Merging contents with existing release directory."

    # Copy the new files over the existing ones
    cp -r "$temp_dir/$release_dir/"* "$Profile_home/$release_dir/"

    # Clean up the temporary directory
    rm -r "$temp_dir"
else
    # If the release directory doesn't exist, move the temporary directory to the target location
    mv "$temp_dir/$release_dir" "$Profile_home/"
fi

# List files after extraction in the specified path
ls -la "$Profile_home/$release_dir"

# Read the content of release.txt
release_content=$(cat "$Profile_home/$release_dir/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Deploy new files for each application
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/$release_dir/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$targeted_path"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
        fi
    done <<< "$release_content"
fi
================

#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Extract release version from the zip file name (assuming the format is release-X.Y.Z.zip)
release_version=$(echo "$zip_file_name" | grep -oP 'release-\K[0-9]+\.[0-9]+\.[0.9]+')
release_dir="release2-$release_version"  # Modify the directory name to release2

# Create a temporary directory for extraction
temp_dir=$(mktemp -d)

# Extract the new release to the temporary directory
unzip -q "$Profile_home/$zip_file_name" -d "$temp_dir"

# If the release directory already exists, merge the contents
if [ -d "$Profile_home/$release_dir" ]; then
    echo "Merging contents with an existing release directory."

    # Copy the new files over the existing ones
    cp -r "$temp_dir/$release_dir/"* "$Profile_home/$release_dir/"

    # Clean up the temporary directory
    rm -r "$temp_dir"
else
    # If the release directory doesn't exist, move the temporary directory to the target location
    mv "$temp_dir/$release_dir" "$Profile_home/"

    # Clean up the temporary directory
    rm -r "$temp_dir/$release_dir"
fi

# List files after extraction in the specified path
ls -la "$Profile_home/$release_dir"

# Read the content of release.txt
release_content=$(cat "$Profile_home/$release_dir/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Deploy new files for each application
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/$release_dir/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$targeted_path"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
        fi
    done <<< "$release_content"
fi
