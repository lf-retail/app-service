I have completed the IBPS deployment on below UAT2 cluster servers. This involved downloading the release artifact from Github Releases and copying it onto the targeted servers from the Runner machine. Additionally, I ensured that the application files within the release artifact were copied to their respective locations as specified in the release.txt file.

Here are the details for the two servers:

Application: ANTIBPSAPP1
IP: 10.15.11.209

Application: ANTIBPSAPP2
IP: 10.15.11.210

Additionally, Today had a discussion with Devdutta Singh, Anisur Rahman Abdul Kalam Shaikh, and Hritik Kounsal regarding the installation of WAR files in WAS,. We discussed the necessary steps to follow if there are any WAR files within the release artifact. I'm scheduled to commence this work on Monday.

Please feel free to reach out if there are any additional requirements or if I've overlooked anything.
======================

Could you please share the test environment details needed to test the script for installing WAR files in WAS?
============

#!/bin/bash

# Server details (replace with your actual values)
WAS_HOST="localhost"
WAS_PORT="8080"
WAS_ADMIN_USER="admin"
WAS_ADMIN_PASSWORD="password"

# WAR file path (replace with your actual path)
WAR_FILE_PATH="/path/to/your/war.war"

# Application name (replace with your desired name)
APP_NAME="your_application_name"

# Context Root (replace with your desired context root)
CONTEXT_ROOT="your_app_context_root"

# Connect to WebSphere administration console
AdminConfig.connect("$WAS_HOST:$WAS_PORT", "-user $WAS_ADMIN_USER", "-password $WAS_ADMIN_PASSWORD")

# Check if application already exists
if [ $(AdminConfig.isAppAvailable "$APP_NAME") = "true" ]
then
  echo "Application $APP_NAME already exists. Skipping installation."
else
  # Install the application with detailed options
  AdminApp.installApplication("$WAR_FILE_PATH", "$APP_NAME", "-detailed")

  # Map shared libraries (replace 'your_shared_library' with actual library name)
  AdminConfig.assignSharedLibraryToApp("$APP_NAME", "your_shared_library")

  # Set context root
  AdminConfig.setContextRootForWebModule("[$APP_NAME 0]", "$CONTEXT_ROOT")

  # Save configuration changes
  AdminConfig.save()
fi

# Disconnect from WebSphere administration console
AdminConfig.disconnect()

echo "WAR deployment script complete."
==================

#!/bin/bash

# Server details (adapt these variables to your environment)
WAS_HOST="localhost"
WAS_PORT="9043" # Change to your WAS administrative port, often 9043 for HTTPS
WAS_ADMIN_USER="admin"
WAS_ADMIN_PASSWORD="password"

# WAR file and application details
WAR_FILE_PATH="/path/to/your/war.war"
APP_NAME="your_application_name"
CONTEXT_ROOT="your_app_context_root"
SHARED_LIB="your_shared_library"

# Path to wsadmin.sh (adjust for your WAS installation)
WSADMIN="/path/to/WebSphere/AppServer/profiles/YourProfile/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="
# Connect to WebSphere Application Server
AdminConfig.connect('$WAS_ADMIN_USER', '$WAS_ADMIN_PASSWORD')

# Check if the application already exists
if AdminApp.list().find('$APP_NAME') != -1:
    print('Application $APP_NAME already exists. Skipping installation.')
else:
    # Install the application
    AdminApp.install('$WAR_FILE_PATH', '[ -appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]] ]')
    # Map shared libraries (Optional: Adjust or remove according to your requirements)
    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')
    # Save configuration changes
    AdminConfig.save()

# Disconnect from the server
AdminConfig.disconnect()
"

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi
=============

Jython Language: The script within WSADMIN_SCRIPT uses Jython syntax. Ensure that your wsadmin tool is configured to use Jython (-lang jython). Most modern WebSphere versions support this by default, but it's good to confirm.

Could you please confirm if the wsadmin tool is configured to use Jython (-lang jython)?

As we discussed please share the steps for what you are required then I can take it further steps

As we discussed, please share the steps you require so that I can proceed with further actions.
==============

#!/bin/bash

# Server details (adapt these variables to your environment)
WAS_HOST="10.15.11.209"
WAS_PORT="9043" # Change to your WAS administrative port, often 9043 for HTTPS
WAS_ADMIN_USER="deployer"
WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details
WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"
APP_NAME="KYC_Remediation"
CONTEXT_ROOT="KYC_Remediation"
SHARED_LIB="ibps_library,omnidocs_library,wfs_library,od_library"

# Path to wsadmin.sh (adjust for your WAS installation)
WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="
# Connect to WebSphere Application Server
AdminConfig.connect('$WAS_ADMIN_USER', '$WAS_ADMIN_PASSWORD')

# Check if the application already exists
if AdminApp.list().find('$APP_NAME') != -1:
    print('Application $APP_NAME already exists. Skipping installation.')
else:
    # Install the application
    AdminApp.install('$WAR_FILE_PATH', '[ -appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]] ]')
    # Map shared libraries (Optional: Adjust or remove according to your requirements)
    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')
    # Save configuration changes
    AdminConfig.save()

# Disconnect from the server
AdminConfig.disconnect()
"

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi

============================

---
- name: Stop WAS
  become: true 
  become_user: itdevtra
  command: "/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/stopServer.sh BPMMBR01 --connect controller=0.15.11.209 command=:shutdown"
  command: "/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/stopNode.sh --connect controller=0.15.11.209 command=:shutdown"
  ignore_errors: yes

- name: Copy war-install-in-was1.sh to Target Server
  copy:
    src: "/ansible/GITHUB_RUNNER/actions-runner10/_work/ibps-was-ansible-cd/ibps-was-ansible-cd/war-install-in-was1.sh"
    dest: "{{ Profile_home }}/release.{{ release_version }}/war-install-in-was1.sh"
    mode: '0755'
  become: yes
  become_user: "{{ ansible_user }}"

- name: Run war-install-in-was1.sh on Target Server
  become: yes
  become_user: "{{ ansible_user }}"
  shell: "cd {{ Profile_home }}/release.{{ release_version }} && ./war-install-in-was1.sh {{ Profile_home }} {{ release_version }}"
  register: deploy_result
  ignore_errors: yes

- name: Start WAS 
  become: true 
  become_user: itdevtra
  command: /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/startNode.sh
  command: /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/startServer.sh BPMMBR01
  
==============
---
- name: Stop WAS
  become: true
  become_user: itdevtra
  ignore_errors: yes
  shell:
    cmd: |
      /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/stopServer.sh BPMMBR01 --connect controller=0.15.11.209 command=:shutdown &&
      /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/stopNode.sh --connect controller=0.15.11.209 command=:shutdown

- name: Copy war-install-in-was1.sh to Target Server
  become: yes
  become_user: "{{ ansible_user }}"
  copy:
    src: "/ansible/GITHUB_RUNNER/actions-runner10/_work/ibps-was-ansible-cd/ibps-was-ansible-cd/war-install-in-was1.sh"
    dest: "{{ Profile_home }}/release.{{ release_version }}/war-install-in-was1.sh"
    mode: '0755'

- name: Run war-install-in-was1.sh on Target Server
  become: yes
  become_user: "{{ ansible_user }}"
  ignore_errors: yes
  shell: "cd {{ Profile_home }}/release.{{ release_version }} && ./war-install-in-was1.sh {{ Profile_home }} {{ release_version }}"
  register: deploy_result

- name: Start WAS
  become: true
  become_user: itdevtra
  shell:
    cmd: |
      /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/startNode.sh &&
      /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/startServer.sh BPMMBR01
================

#!/bin/bash

# Server details (adapt these variables to your environment)
WAS_HOST="10.15.11.209"
WAS_PORT="9043" # Change to your WAS administrative port, often 9043 for HTTPS
WAS_ADMIN_USER="deployer"
WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details
WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"
APP_NAME="KYC_Remediation"
CONTEXT_ROOT="KYC_Remediation"
SHARED_LIB="ibps_library,omnidocs_library,wfs_library,od_library"

# Path to wsadmin.sh (adjust for your WAS installation)
WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="
# Connect to WebSphere Application Server
AdminConfig.connect('$WAS_ADMIN_USER', '$WAS_ADMIN_PASSWORD')

# Check if the application already exists
if AdminApp.list().find('$APP_NAME') != -1:
    print('Application $APP_NAME already exists. Skipping installation.')
else:
    # Install the application
    AdminApp.install('$WAR_FILE_PATH', '[ -appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]] ]')
    # Map shared libraries (Optional: Adjust or remove according to your requirements)
    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')
    # Save configuration changes
    AdminConfig.save()

# Disconnect from the server
AdminConfig.disconnect()
"

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi
==============

#!/bin/bash

# Server details (adapt these variables to your environment)
WAS_HOST="10.15.11.209"
WAS_PORT="9043" # Change to your WAS administrative port, often 9043 for HTTPS
WAS_ADMIN_USER="deployer"
WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details
WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"
APP_NAME="KYC_Remediation"
CONTEXT_ROOT="KYC_Remediation"
SHARED_LIB="$1" # Accept shared libraries as arguments

# Path to wsadmin.sh (adjust for your WAS installation)
WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="
# Connect to WebSphere Application Server
AdminConfig.connect('$WAS_ADMIN_USER', '$WAS_ADMIN_PASSWORD')

# Check if the application already exists
if AdminApp.list().find('$APP_NAME') != -1:
    print('Application $APP_NAME already exists. Skipping installation.')
else:
    # Install the application
    AdminApp.install('$WAR_FILE_PATH', '[ -appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]] ]')
    # Map shared libraries
    for lib in $SHARED_LIB; do
        AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $lib]]')
    done
    # Save configuration changes
    AdminConfig.save()

# Disconnect from the server
AdminConfig.disconnect()
"

# Check if shared libraries were provided
if [ -z "$SHARED_LIB" ]; then
    echo "No shared libraries provided. Deployment failed."
    exit 1
fi

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi

./your_script.sh ibps_library omnidocs_library wfs_library od_library
=============
#!/bin/bash

# Server details (adapt these variables to your environment)
WAS_HOST="10.15.11.209"
WAS_PORT="9043" # Change to your WAS administrative port, often 9043 for HTTPS
WAS_ADMIN_USER="deployer"
WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details
WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"
APP_NAME="KYC_Remediation"
CONTEXT_ROOT="KYC_Remediation"

# Combine all shared libraries into a single string
SHARED_LIB=$(printf ",%s" "$@")
SHARED_LIB=${SHARED_LIB:1} # Remove the leading comma

# Path to wsadmin.sh (adjust for your WAS installation)
WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="
# Connect to WebSphere Application Server
AdminConfig.connect('$WAS_ADMIN_USER', '$WAS_ADMIN_PASSWORD')

# Check if the application already exists
if AdminApp.list().find('$APP_NAME') != -1:
    print('Application $APP_NAME already exists. Skipping installation.')
else:
    # Install the application
    AdminApp.install('$WAR_FILE_PATH', '[ -appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]] ]')
    # Map shared libraries (Optional: Adjust or remove according to your requirements)
    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')
    # Save configuration changes
    AdminConfig.save()

# Disconnect from the server
AdminConfig.disconnect()
"

# Check if shared libraries were provided
if [ -z "$SHARED_LIB" ]; then
    echo "No shared libraries provided. Deployment failed."
    exit 1
fi

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi
=====================

---
- name: Stop WAS
  become: true
  become_user: "{{ ansible_user }}"
  ignore_errors: yes
  shell:
    cmd: |
      /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/stopServer.sh BPMMBR01 --connect controller=10.15.11.209 command=:shutdown &&
      /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/stopNode.sh --connect controller=10.15.11.209 command=:shutdown

- name: Copy war-install-in-was1.sh to Target Server
  become: yes
  become_user: "{{ ansible_user }}"
  copy:
    src: "/ansible/GITHUB_RUNNER/actions-runner10/_work/ibps-was-ansible-cd/ibps-was-ansible-cd/war-install-in-was1.sh"
    dest: "{{ Profile_home }}/release.{{ release_version }}/war-install-in-was1.sh"
    mode: '0755'

- name: Run war-install-in-was1.sh on Target Server
  become: yes
  become_user: "{{ ansible_user }}"
  ignore_errors: yes
  shell: "cd {{ Profile_home }}/release.{{ release_version }} && ./war-install-in-was1.sh ibps_library omnidocs_library wfs_library od_library"
  register: deploy_result

- name: Start WAS
  become: true
  become_user: "{{ ansible_user }}"
  shell:
    cmd: |
      /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/startNode.sh &&
      /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/startServer.sh BPMMBR01
