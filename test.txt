#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup and copy deployment files for each application
while IFS=, read -r app_name app_targeted_location; do
    # Check if the app_targeted_location is not empty
    if [ -n "$app_targeted_location" ]; then
        # Backup timestamp
        backup_timestamp=$(date +'%Y%m%d%H%M%S')

        # Construct paths for old deployment files and backup location
        old_deployment_path="$targeted_location/$app_targeted_location"
        backup_path="$backup_location/$app_name-$backup_timestamp"

        # Move old deployment files to backup location
        mv "$old_deployment_path" "$backup_path"

        # Print information about the backup
        echo "Backup: $app_name - $old_deployment_path -> $backup_path"
        
        # Define paths for new deployment files and targeted location
        new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
        targeted_path="$targeted_location/$app_targeted_location"

        # Copy new deployment files to targeted location
        cp -r "$new_deployment_path" "$targeted_path"

        # Print information about the copy
        echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
    fi
done <<< "$release_content"
===================

#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup and copy deployment files for each application
while IFS=, read -r app_name app_targeted_location; do
    # Check if the app_targeted_location is not empty
    if [ -n "$app_targeted_location" ]; then
        # Backup timestamp
        backup_timestamp=$(date +'%Y%m%d%H%M%S')

        # Construct paths for old deployment files and backup location
        old_deployment_path="$targeted_location/$app_targeted_location"
        backup_path="$backup_location/$app_name-$backup_timestamp"

        # Move old deployment files to backup location
        mv "$old_deployment_path" "$backup_path"

        # Print information about the backup
        echo "Backup: $app_name - $old_deployment_path -> $backup_path"
        
        # Define paths for new deployment files and targeted location
        new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
        targeted_path="$targeted_location/$app_targeted_location"

        # Copy new deployment files to targeted location
        cp -r "$new_deployment_path" "$targeted_path"

        # Print information about the copy
        echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
    fi
done <<< "$release_content"
