#!/bin/bash

# Server details (adapt these variables to your environment)
WAS_HOST="10.15.11.209"
WAS_PORT="9043" # Change to your WAS administrative port, often 9043 for HTTPS
WAS_ADMIN_USER="deployer"
WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details
WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"
APP_NAME="KYC_Remediation"
CONTEXT_ROOT="KYC_Remediation"

# Combine all shared libraries into a single string
SHARED_LIB=$(printf ",%s" "$@")
SHARED_LIB=${SHARED_LIB:1} # Remove the leading comma

# Path to wsadmin.sh (adjust for your WAS installation)
WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="
# Connect to WebSphere Application Server
AdminConfig.connect('$WAS_ADMIN_USER', '$WAS_ADMIN_PASSWORD')

# Check if the application already exists
if AdminApp.list().find('$APP_NAME') != -1:
    print('Application $APP_NAME already exists. Skipping installation.')
else:
    # Install the application with Parent Last class loader policy
    AdminApp.install('$WAR_FILE_PATH', '[ -appname $APP_NAME -contextroot $CONTEXT_ROOT -MapModulesToServers [[ .* .* WebSphere:cell=YourCellName,node=YourNodeName,server=YourServerName ]] -MapWebModToVH [[ .* .* default_host ]] -classloaderMode PARENT_LAST ]')
    # Install the application
    #AdminApp.install('$WAR_FILE_PATH', '[ -appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]] ]')
    # Map shared libraries (Optional: Adjust or remove according to your requirements)
    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')
    # Save configuration changes
    AdminConfig.save()

# Disconnect from the server
AdminConfig.disconnect()
"

# Check if shared libraries were provided
if [ -z "$SHARED_LIB" ]; then
    echo "No shared libraries provided. Deployment failed."
    exit 1
fi

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi
===================

#!/bin/bash

# Server details

WAS_HOST="10.15.11.209"

WAS_PORT="9043"

WAS_ADMIN_USER="deployer"

WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details

WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"

APP_NAME="KYC_Remediation"

CONTEXT_ROOT="KYC_Remediation"

# Combine shared libraries into a single string

SHARED_LIB="ibps_library,omnidocs_library,wfs_library,od_library"

# Path to wsadmin.sh

WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content

WSADMIN_SCRIPT="

# Check if the application already exists

if '$APP_NAME' in AdminApp.list().splitlines():

    print('Application $APP_NAME already exists. Skipping installation.')

else:

    # Install the application

    AdminApp.install('$WAR_FILE_PATH', '-appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]]')

    # Map shared libraries

    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')

    # Save configuration changes

    AdminConfig.save()

"

# Execute the script with wsadmin

echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"

echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

# Check deployment status

if [ $? -eq 0 ]; then

    echo "Deployment of $APP_NAME completed successfully."

else

    echo "Deployment failed. Check the output for errors."

    exit 1

fi

==============

I wanted to confirm that the deployment of the IBPS lose file on the UAT cluster servers, 10.15.11.209 and 10.15.11.210, has been completed successfully.

Currently, we're in the process of implementing another script for the installation of the WAR file on the WAS console. However, we've encountered some issues along the way.

Could you please confirm the port number for the WAS server?

WAS_HOST="10.15.11.209"
WAS_PORT="9043" 


===============

Dear Shanmuganathan,

As per the below error script is try to find below SOAP port.

SOAP_CONNECTOR_ADDRESS=8879

Also below highlighted part below application (KYC_Remediation) is already installed in server. 

Deploying KYC_Remediation from WAR file: /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war
WASX7023E: Error creating "SOAP" connection to host "10.15.11.209"; exception information: com.ibm.websphere.management.exception.ConnectorNotAvailableException: [SOAPException: faultCode=SOAP-ENV:Protocol; msg=Unsupported response content type &quot;text/html&quot;, must be: &quot;text/xml&quot;. Response was:
&lt;H1&gt;SRVE0255E: A WebGroup/Virtual Host to handle / has not been defined.&lt;/H1&gt;&lt;BR&gt;&lt;H3&gt;SRVE0255E: A WebGroup/Virtual Host to handle 10.15.11.209:9043 has not been defined.&lt;/H3&gt;&lt;BR&gt;
]
WASX7213I: This scripting client is not connected to a server process; please refer to the log file /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/logs/wsadmin.traceout for additional information.
WASX8011W: AdminTask object is not available.
WASX7031I: For help, enter: "print Help.help()"
wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>Traceback (innermost last):
  (no code object) at line 0
  File "<input>", line 2
SyntaxError: invalid syntax
wsadmin>Application KYC_Remediation already exists. Skipping installation.
wsadmin>wsadmin>Traceback (innermost last):
  (no code object) at line 0
  File "<input>", line 1
        else:
        ^
SyntaxError: invalid syntax
wsadmin>wsadmin>wsadmin>wsadmin>WASX7015E: Exception running command: "    AdminApp.install('/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war', '-appname KYC_Remediation -contextroot KYC_Remediation -MapWebModToVH [[ .* .* default_host ]]')"; exception information:
com.ibm.ws.scripting.ScriptingException: WASX7206W: The application management service is not running. Application management commands will not run.
 
wsadmin>wsadmin>wsadmin>wsadmin>WASX7015E: Exception running command: "    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:KYC_Remediation/'), '[[libraryName ibps_library,omnidocs_library,wfs_library,od_library]]')"; exception information:
com.ibm.ws.scripting.ScriptingException: WASX7070E: The configuration service is not available.
 
wsadmin>wsadmin>wsadmin>wsadmin>WASX7015E: Exception running command: "    AdminConfig.save()"; exception information:
com.ibm.ws.scripting.ScriptingException: WASX7070E: The configuration service is not available.
 
wsadmin>wsadmin>wsadmin>Deployment failed. Check the output for errors.


I wanted to inform you that the deployment of the IBPS loose files on the UAT cluster servers, 10.15.11.209 and 10.15.11.210, has been successfully completed.
Currently, we are in the process of implementing another script for the installation of the WAR file on the WAS console. Unfortunately, we've encountered some issues along the way.
During our discussion with Anisur Rahman from the IBPS team, he suggested changing the SOAP port and implementing the script in case the WAR application is already installed.
I'm actively working on this and will provide you with an update once it's done.
=====================

#!/bin/bash

# Server details

WAS_HOST="10.15.11.209"

WAS_PORT="8879"

WAS_ADMIN_USER="deployer"

WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details

WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"

APP_NAME="KYC_Remediation"

CONTEXT_ROOT="KYC_Remediation"

# Combine shared libraries into a single string

SHARED_LIB="ibps_library,omnidocs_library,wfs_library,od_library"

# Path to wsadmin.sh

WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content

WSADMIN_SCRIPT="

# Check if the application already exists

if '$APP_NAME' in AdminApp.list().splitlines():

    print('Application $APP_NAME already exists. Skipping installation.')

else:

    # Install the application
	
	 AdminApp.help()

    # AdminApp.install('$WAR_FILE_PATH', '-appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]]')

    # Map shared libraries

    # AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')

    # Save configuration changes

    # AdminConfig.save()

"

# Execute the script with wsadmin

echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"

echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

# Check deployment status

if [ $? -eq 0 ]; then

    echo "Deployment of $APP_NAME completed successfully."

else

    echo "Deployment failed. Check the output for errors."

    exit 1

fi
=================

#!/bin/bash
# Server details
WAS_HOST="10.15.11.209"
WAS_PORT="8879"
WAS_ADMIN_USER="deployer"
WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details
WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"
APP_NAME="KYC_Remediation"
CONTEXT_ROOT="KYC_Remediation"

# Combine shared libraries into a single string
SHARED_LIB="ibps_library,omnidocs_library,wfs_library,od_library"

# Path to wsadmin.sh
WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="

# Check if the application already exists
if '$APP_NAME' in AdminApp.list().splitlines():
    #print('Application $APP_NAME already exists. Skipping installation.')
    AdminApp.help()
else:
    # Install the application
	 AdminApp.help()
    # AdminApp.install('$WAR_FILE_PATH', '-appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]]')
    # Map shared libraries
    # AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')
    # Save configuration changes
    # AdminConfig.save()
"

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

# Check deployment status
if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi
======================

#!/bin/bash

# Server details
WAS_HOST="10.15.11.209"
WAS_PORT="8879"
WAS_ADMIN_USER="deployer"
WAS_ADMIN_PASSWORD="deployer@123"

# WAR file and application details
WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"
APP_NAME="KYC_Remediation"
CONTEXT_ROOT="KYC_Remediation"

# Combine shared libraries into a single string
SHARED_LIB="ibps_library,omnidocs_library,wfs_library,od_library"

# Path to wsadmin.sh
WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"

# wsadmin script content
WSADMIN_SCRIPT="
# Check if the application already exists
if '$APP_NAME' in AdminApp.list().splitlines():
    #print('Application $APP_NAME already exists. Skipping installation.')
    AdminApp.help()
else:
    # Install the application
    AdminApp.help()
    # AdminApp.install('$WAR_FILE_PATH', '-appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]]')
    # Map shared libraries
    # AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')
    # Save configuration changes
    # AdminConfig.save()
"

# Execute the script with wsadmin
echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"
echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD

# Check deployment status
if [ $? -eq 0 ]; then
    echo "Deployment of $APP_NAME completed successfully."
else
    echo "Deployment failed. Check the output for errors."
    exit 1
fi
=======================

TASK [IBPS-deployment : Run war-install-in-was.sh on Target Server] ************
task path: /ansible/GITHUB_RUNNER/actions-runner10/_work/ibps-was-ansible-cd/ibps-was-ansible-cd/roles/IBPS-deployment/tasks/main-war-installation.yml:27
<10.15.11.209> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.11.209> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/9d82de7b55 10.15.11.209 '/bin/sh -c '"'"'( umask 77 && mkdir -p "` echo /tmp `"&& mkdir /tmp/ansible-tmp-1713787810.955295-2120680-200127630301599 && echo ansible-tmp-1713787810.955295-2120680-200127630301599="` echo /tmp/ansible-tmp-1713787810.955295-2120680-200127630301599 `" ) && sleep 0'"'"''
<10.15.11.209> (0, b'ansible-tmp-1713787810.955295-2120680-200127630301599=/tmp/ansible-tmp-1713787810.955295-2120680-200127630301599\n', b'')
Using module file /usr/lib/python3.6/site-packages/ansible/modules/commands/command.py
<10.15.11.209> PUT /home/itdevtra/.ansible/tmp/ansible-local-212063554r94j79/tmp8vt8bszr TO /tmp/ansible-tmp-1713787810.955295-2120680-200127630301599/AnsiballZ_command.py
<10.15.11.209> SSH: EXEC sftp -b - -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/9d82de7b55 '[10.15.11.209]'
<10.15.11.209> (0, b'sftp> put /home/itdevtra/.ansible/tmp/ansible-local-212063554r94j79/tmp8vt8bszr /tmp/ansible-tmp-1713787810.955295-2120680-200127630301599/AnsiballZ_command.py\n', b'')
<10.15.11.209> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.11.209> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/9d82de7b55 10.15.11.209 '/bin/sh -c '"'"'chmod u+x /tmp/ansible-tmp-1713787810.955295-2120680-200127630301599/ /tmp/ansible-tmp-1713787810.955295-2120680-200127630301599/AnsiballZ_command.py && sleep 0'"'"''
<10.15.11.209> (0, b'', b'')
<10.15.11.209> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.11.209> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/9d82de7b55 -tt 10.15.11.209 '/bin/sh -c '"'"'/usr/bin/python /tmp/ansible-tmp-1713787810.955295-2120680-200127630301599/AnsiballZ_command.py && sleep 0'"'"''
<10.15.11.209> (0, b'\r\n{"changed": true, "end": "2024-04-22 16:13:27.453129", "stdout": "Deploying KYC_Remediation from WAR file: /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war\\nWASX7209I: Connected to process \\"dmgr\\" on node antibpsapp1CellManager01 using SOAP connector;  The type of process is: DeploymentManager\\nWASX7031I: For help, enter: \\"print Help.help()\\"\\nwsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>\'WASX7095I: The AdminApp object allows application objects to be manipulated\\\\n\\\\t-- this includes installing, uninstalling, editing, and listing. Most\\\\n\\\\tof the commands supported by AdminApp operate in two modes: the default\\\\n\\\\tmode is one in which AdminApp communicates with the WebSphere server to\\\\n\\\\taccomplish its tasks.  A local mode is also possible, in which no\\\\n\\\\tserver communication takes place.  The local mode operation is invoked\\\\n\\\\tby bringing up the scripting client with no server connected using the\\\\n\\\\tcommand line \\"-conntype NONE\\" option tor setting the\\\\n\\\\t\\"com.ibm.ws.scripting.connectionType=NONE\\" property in the\\\\n\\\\twsadmin.properties.\\\\n\\\\n\\\\tThe following commands are supported by AdminApp; more detailed\\\\n\\\\tinformation about each of these commands is available by using the\\\\n\\\\t\\"help\\" command of AdminApp and supplying the name of the command\\\\n\\\\tas an argument.\\\\n\\\\ndeleteUserAndGroupEntries \\\\n\\\\t\\\\tDeletes all the user/group information for all the roles and\\\\n\\\\t\\\\tall the user name/password information for RunAs roles for a\\\\n\\\\t\\\\tgiven application\\\\nedit\\\\t\\\\tEdits the properties of an application\\\\neditInteractive\\\\tEdits the properties of an application interactively\\\\nexport\\\\t\\\\tExports application to a file\\\\nexportDDL\\\\tExports DDL from application to a directory\\\\nexportFile\\\\tExports content of a single file from an application to a file\\\\ngetDeployStatus\\\\tReturns the combined Deployment status of the application\\\\nhelp\\\\t\\\\tShows help information\\\\ninstall\\\\t\\\\tInstalls an application, given a file name and an option string\\\\ninstallInteractive\\\\n\\\\t\\\\tInstalls an application in interactive mode, given a file name\\\\n\\\\t\\\\tand an option string\\\\nisAppReady\\\\tChecks whether the application is ready to be run\\\\nlist\\\\t\\\\tLists all installed applications\\\\nlistModules\\\\tLists the modules in a specified application\\\\noptions\\\\t\\\\tShows the options available, for a given file, application,\\\\n\\\\t\\\\tor in general\\\\nrenameApplication\\\\tRename a given application\\\\npublishWSDL\\\\tPublishs WSDL files for a given application\\\\nsearchJNDIReferences\\\\n\\\\t\\\\tLists application that refers to the given JNDIName on a given\\\\n\\\\t\\\\tnode\\\\ntaskInfo\\\\tShows detailed information pertaining to a given install task\\\\n\\\\t\\\\tfor a given file\\\\nuninstall\\\\tUninstalls an application, given an application name and\\\\n\\\\t\\\\tan option string\\\\nupdate\\\\t\\\\tUpdates an installed application\\\\nupdateAccessIDs\\\\tUpdates the user/group binding information with accessID\\\\n\\\\t\\\\tfrom user registry for a given application\\\\nupdateInteractive\\\\tUpdates an installed application interactively\\\\nview\\\\t\\\\tViews an application or module, given an application or\\\\n\\\\t\\\\tmodule name\'\\nwsadmin>Deployment of KYC_Remediation completed successfully.", "cmd": "cd /ibm/IBM/Application/release/release.3.0.0.41 && ./war-install-in-was.sh", "rc": 0, "start": "2024-04-22 16:13:19.073718", "stderr": "", "delta": "0:00:08.379411", "invocation": {"module_args": {"creates": null, "executable": null, "_uses_shell": true, "strip_empty_ends": true, "_raw_params": "cd /ibm/IBM/Application/release/release.3.0.0.41 && ./war-install-in-was.sh", "removes": null, "argv": null, "warn": false, "chdir": null, "stdin_add_newline": true, "stdin": null}}}\r\n', b'Shared connection to 10.15.11.209 closed.\r\n')
<10.15.11.209> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.11.209> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/9d82de7b55 10.15.11.209 '/bin/sh -c '"'"'rm -f -r /tmp/ansible-tmp-1713787810.955295-2120680-200127630301599/ > /dev/null 2>&1 && sleep 0'"'"''
<10.15.11.209> (0, b'', b'')
changed: [ANTIBPSAPP1] => {
    "changed": true,
    "cmd": "cd /ibm/IBM/Application/release/release.3.0.0.41 && ./war-install-in-was.sh",
    "delta": "0:00:08.379411",
    "end": "2024-04-22 16:13:27.453129",
    "invocation": {
        "module_args": {
            "_raw_params": "cd /ibm/IBM/Application/release/release.3.0.0.41 && ./war-install-in-was.sh",
            "_uses_shell": true,
            "argv": null,
            "chdir": null,
            "creates": null,
            "executable": null,
            "removes": null,
            "stdin": null,
            "stdin_add_newline": true,
            "strip_empty_ends": true,
            "warn": false
        }
    },
    "rc": 0,
    "start": "2024-04-22 16:13:19.073718",
    "stderr": "",
    "stderr_lines": [],
    "stdout": "Deploying KYC_Remediation from WAR file: /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war\nWASX7209I: Connected to process \"dmgr\" on node antibpsapp1CellManager01 using SOAP connector;  The type of process is: DeploymentManager\nWASX7031I: For help, enter: \"print Help.help()\"\nwsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>'WASX7095I: The AdminApp object allows application objects to be manipulated\\n\\t-- this includes installing, uninstalling, editing, and listing. Most\\n\\tof the commands supported by AdminApp operate in two modes: the default\\n\\tmode is one in which AdminApp communicates with the WebSphere server to\\n\\taccomplish its tasks.  A local mode is also possible, in which no\\n\\tserver communication takes place.  The local mode operation is invoked\\n\\tby bringing up the scripting client with no server connected using the\\n\\tcommand line \"-conntype NONE\" option tor setting the\\n\\t\"com.ibm.ws.scripting.connectionType=NONE\" property in the\\n\\twsadmin.properties.\\n\\n\\tThe following commands are supported by AdminApp; more detailed\\n\\tinformation about each of these commands is available by using the\\n\\t\"help\" command of AdminApp and supplying the name of the command\\n\\tas an argument.\\n\\ndeleteUserAndGroupEntries \\n\\t\\tDeletes all the user/group information for all the roles and\\n\\t\\tall the user name/password information for RunAs roles for a\\n\\t\\tgiven application\\nedit\\t\\tEdits the properties of an application\\neditInteractive\\tEdits the properties of an application interactively\\nexport\\t\\tExports application to a file\\nexportDDL\\tExports DDL from application to a directory\\nexportFile\\tExports content of a single file from an application to a file\\ngetDeployStatus\\tReturns the combined Deployment status of the application\\nhelp\\t\\tShows help information\\ninstall\\t\\tInstalls an application, given a file name and an option string\\ninstallInteractive\\n\\t\\tInstalls an application in interactive mode, given a file name\\n\\t\\tand an option string\\nisAppReady\\tChecks whether the application is ready to be run\\nlist\\t\\tLists all installed applications\\nlistModules\\tLists the modules in a specified application\\noptions\\t\\tShows the options available, for a given file, application,\\n\\t\\tor in general\\nrenameApplication\\tRename a given application\\npublishWSDL\\tPublishs WSDL files for a given application\\nsearchJNDIReferences\\n\\t\\tLists application that refers to the given JNDIName on a given\\n\\t\\tnode\\ntaskInfo\\tShows detailed information pertaining to a given install task\\n\\t\\tfor a given file\\nuninstall\\tUninstalls an application, given an application name and\\n\\t\\tan option string\\nupdate\\t\\tUpdates an installed application\\nupdateAccessIDs\\tUpdates the user/group binding information with accessID\\n\\t\\tfrom user registry for a given application\\nupdateInteractive\\tUpdates an installed application interactively\\nview\\t\\tViews an application or module, given an application or\\n\\t\\tmodule name'\nwsadmin>Deployment of KYC_Remediation completed successfully.",
    "stdout_lines": [
        "Deploying KYC_Remediation from WAR file: /ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war",
        "WASX7209I: Connected to process \"dmgr\" on node antibpsapp1CellManager01 using SOAP connector;  The type of process is: DeploymentManager",
        "WASX7031I: For help, enter: \"print Help.help()\"",
        "wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>wsadmin>'WASX7095I: The AdminApp object allows application objects to be manipulated\\n\\t-- this includes installing, uninstalling, editing, and listing. Most\\n\\tof the commands supported by AdminApp operate in two modes: the default\\n\\tmode is one in which AdminApp communicates with the WebSphere server to\\n\\taccomplish its tasks.  A local mode is also possible, in which no\\n\\tserver communication takes place.  The local mode operation is invoked\\n\\tby bringing up the scripting client with no server connected using the\\n\\tcommand line \"-conntype NONE\" option tor setting the\\n\\t\"com.ibm.ws.scripting.connectionType=NONE\" property in the\\n\\twsadmin.properties.\\n\\n\\tThe following commands are supported by AdminApp; more detailed\\n\\tinformation about each of these commands is available by using the\\n\\t\"help\" command of AdminApp and supplying the name of the command\\n\\tas an argument.\\n\\ndeleteUserAndGroupEntries \\n\\t\\tDeletes all the user/group information for all the roles and\\n\\t\\tall the user name/password information for RunAs roles for a\\n\\t\\tgiven application\\nedit\\t\\tEdits the properties of an application\\neditInteractive\\tEdits the properties of an application interactively\\nexport\\t\\tExports application to a file\\nexportDDL\\tExports DDL from application to a directory\\nexportFile\\tExports content of a single file from an application to a file\\ngetDeployStatus\\tReturns the combined Deployment status of the application\\nhelp\\t\\tShows help information\\ninstall\\t\\tInstalls an application, given a file name and an option string\\ninstallInteractive\\n\\t\\tInstalls an application in interactive mode, given a file name\\n\\t\\tand an option string\\nisAppReady\\tChecks whether the application is ready to be run\\nlist\\t\\tLists all installed applications\\nlistModules\\tLists the modules in a specified application\\noptions\\t\\tShows the options available, for a given file, application,\\n\\t\\tor in general\\nrenameApplication\\tRename a given application\\npublishWSDL\\tPublishs WSDL files for a given application\\nsearchJNDIReferences\\n\\t\\tLists application that refers to the given JNDIName on a given\\n\\t\\tnode\\ntaskInfo\\tShows detailed information pertaining to a given install task\\n\\t\\tfor a given file\\nuninstall\\tUninstalls an application, given an application name and\\n\\t\\tan option string\\nupdate\\t\\tUpdates an installed application\\nupdateAccessIDs\\tUpdates the user/group binding information with accessID\\n\\t\\tfrom user registry for a given application\\nupdateInteractive\\tUpdates an installed application interactively\\nview\\t\\tViews an application or module, given an application or\\n\\t\\tmodule name'",
        "wsadmin>Deployment of KYC_Remediation completed successfully."
    ]
}
======

Sreedevi.Unnikrishnana@rakbank.ae
Anisur.Shaikh@rakbank.ae
===============

#!/bin/bash
 
# Server details

WAS_HOST="10.15.11.209"

WAS_PORT="9043"

WAS_ADMIN_USER="deployer"

WAS_ADMIN_PASSWORD="deployer@123"
 
# WAR file and application details

WAR_FILE_PATH="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/antibpsapp1Cell01/KYC_Remediation.war"

APP_NAME="KYC_Remediation"

CONTEXT_ROOT="KYC_Remediation"
 
# Combine shared libraries into a single string

SHARED_LIB="ibps_library,omnidocs_library,wfs_library,od_library"
 
# Path to wsadmin.sh

WSADMIN="/ibm/IBM/WebSphere/AppServer/profiles/AppSrv01/bin/wsadmin.sh"
 
# wsadmin script content

WSADMIN_SCRIPT="

# Check if the application already exists

if '$APP_NAME' in AdminApp.list().splitlines():

    print('Application $APP_NAME already exists. Updating...')

    # Update the application

    AdminApp.update('$APP_NAME', 'app', ['-operation', 'update', '-contents', '$WAR_FILE_PATH', '-contextroot', '$CONTEXT_ROOT'])

    # Map shared libraries

    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')

    # Save configuration changes

    AdminConfig.save()

else:

    # Install the application

    AdminApp.install('$WAR_FILE_PATH', '-appname $APP_NAME -contextroot $CONTEXT_ROOT -MapWebModToVH [[ .* .* default_host ]]')

    # Map shared libraries

    AdminConfig.create('LibraryRef', AdminConfig.getid('/Deployment:$APP_NAME/'), '[[libraryName $SHARED_LIB]]')

    # Save configuration changes

    AdminConfig.save()

"
 
# Execute the script with wsadmin

echo "Deploying $APP_NAME from WAR file: $WAR_FILE_PATH"

echo "$WSADMIN_SCRIPT" | $WSADMIN -lang jython -conntype SOAP -host $WAS_HOST -port $WAS_PORT -user $WAS_ADMIN_USER -password $WAS_ADMIN_PASSWORD
 
# Check deployment status

if [ $? -eq 0 ]; then

    echo "Deployment of $APP_NAME completed successfully."

else

    echo "Deployment failed. Check the output for errors."

    exit 1

fi
