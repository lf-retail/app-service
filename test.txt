#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Backup timestamp
            backup_timestamp=$(date +'%Y%m%d%H%M%S')

            # Construct paths for old deployment files and backup location
            old_deployment_path="$targeted_location/$app_targeted_location"
            backup_path="$backup_location/$app_name-$backup_timestamp"

            # Move old deployment files to backup location
            mv "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"
            
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$targeted_path"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
        fi
    done <<< "$release_content"
fi
====================================
#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"
    backup_location="$backup_location"  # Use the variable passed from Ansible

    IFS=$'\n'  # Set Internal Field Separator to newline to handle file names with spaces

    # Iterate through each file in release_content
    for app_info in $release_content; do
        # Extract app_name and app_targeted_location from each line
        app_name=$(echo "$app_info" | cut -d',' -f1)
        app_targeted_location=$(echo "$app_info" | cut -d',' -f2)

        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Backup timestamp
            backup_timestamp=$(date +'%Y%m%d%H%M%S')

            # Construct paths for old deployment files and backup location
            old_deployment_path="$targeted_location/$app_targeted_location"
            backup_path="$backup_location/$app_name-$backup_timestamp"

            # Move old deployment files to backup location
            mv "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"
            
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$targeted_path"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
        fi
    done
fi
==============================

#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Log file for backup details
    change_log="$Profile_home/release/change.log"
    
    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Backup timestamp
            backup_timestamp=$(date +'%Y%m%d%H%M%S')

            # Construct paths for old deployment files and backup location
            old_deployment_path="$targeted_location/$app_targeted_location"
            backup_path="$backup_location/$app_name-$backup_timestamp"

            # Move old deployment files to backup location
            mv "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"
            
            # Append backup details to the change.log file
            echo "$(date +'%Y-%m-%d %H:%M:%S') - Backup: $app_name - $old_deployment_path -> $backup_path" >> "$change_log"
            
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$targeted_path"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
            
            # Append copy details to the change.log file
            echo "$(date +'%Y-%m-%d %H:%M:%S') - Copy: $app_name - $new_deployment_path -> $targeted_path" >> "$change_log"

            # List files in the targeted location after copying
            ls -la "$targeted_path"
        fi
    done <<< "$release_content"
fi
=============================

#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Log file for backup details
    change_log="$Profile_home/release/change.log"
    
    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Backup timestamp
            backup_timestamp=$(date +'%Y%m%d%H%M%S')

            # Construct paths for old deployment files and backup location
            old_deployment_path="$targeted_location/$app_targeted_location"
            backup_path="$backup_location/$app_name-$backup_timestamp"

            # Move old deployment files to backup location
            mv "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"
            
            # Append backup details to the change.log file
            echo "$(date +'%Y-%m-%d %H:%M:%S') - Backup: $app_name - $old_deployment_path -> $backup_path" >> "$change_log"
            
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$targeted_path"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
            
            # Append copy details to the change.log file
            echo "$(date +'%Y-%m-%d %H:%M:%S') - Copy: $app_name - $new_deployment_path -> $targeted_path" >> "$change_log"

            # List files in the targeted location after copying
            ls -la "$targeted_path"
        fi
    done <<< "$release_content"
fi
================

#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Backup timestamp
            backup_timestamp=$(date +'%Y%m%d%H%M%S')

            # Construct paths for old deployment files and backup location
            old_deployment_path="$targeted_location/$app_targeted_location"
            backup_path="$backup_location/$app_name-$backup_timestamp"

            # Move old deployment files to backup location
            mv "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"
            
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$targeted_path"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
        else
            # Print a message if app_targeted_location is empty
            echo "Warning: Empty target location for $app_name. Skipping."
        fi
    done <<< "$release_content"
fi

--------------------------

#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "Release Content:"
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Backup timestamp
            backup_timestamp=$(date +'%Y%m%d%H%M%S')

            # Construct paths for old deployment files and backup location
            old_deployment_path="$targeted_location/$app_targeted_location"
            backup_path="$backup_location/$app_name-$backup_timestamp"

            # Move old deployment files to backup location
            if mv "$old_deployment_path" "$backup_path"; then
                echo "Backup: $app_name - $old_deployment_path -> $backup_path"
            else
                echo "Error: Failed to backup $app_name. Exiting."
                exit 1
            fi
            
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            if cp -r "$new_deployment_path" "$targeted_path"; then
                echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
            else
                echo "Error: Failed to copy $app_name. Exiting."
                exit 1
            fi
        else
            # Print a message if app_targeted_location is empty
            echo "Warning: Empty target location for $app_name. Skipping."
        fi
    done <<< "$release_content"
fi
======================

#!/bin/bash
Profile_home="$1"
zip_file_url="$2"
zip_file_name="$3"
backup_location="$4"

echo "Profile_home: $Profile_home"
echo "zip_file_url: $zip_file_url"
echo "zip_file_name: $zip_file_name"

ls -la "$Profile_home"

# Use unzip with -u option to update existing files
unzip -uq "$Profile_home/$zip_file_name" -d "$Profile_home"

# List files after extraction in the specified path
ls -la "$Profile_home/release/"

# Read the content of release.txt
release_content=$(cat "$Profile_home/release/release.txt" 2>/dev/null)

# Print the content of release_content
echo "Release Content:"
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    targeted_location="{{ targeted_location }}"
    backup_location="$backup_location"  # Use the variable passed from Ansible

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if the app_targeted_location is not empty
        if [ -n "$app_targeted_location" ]; then
            # Backup timestamp
            backup_timestamp=$(date +'%Y%m%d%H%M%S')

            # Construct paths for old deployment files and backup location
            old_deployment_path="$targeted_location/$app_targeted_location"
            backup_path="$backup_location/$app_name-$backup_timestamp"

            # Move old deployment files to backup location
            if mv "$old_deployment_path" "$backup_path"; then
                echo "Backup: $app_name - $old_deployment_path -> $backup_path"
            else
                echo "Error: Failed to backup $app_name. Exiting."
                exit 1
            fi
            
            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release/$app_name"  # Assuming the new files are in the release directory
            targeted_path="$targeted_location/$app_targeted_location"

            # Copy new deployment files to targeted location
            if cp -r "$new_deployment_path" "$targeted_path"; then
                echo "Copy: $app_name - $new_deployment_path -> $targeted_path"
            else
                echo "Error: Failed to copy $app_name. Exiting."
                exit 1
            fi
        else
            # Print a message if app_targeted_location is empty
            echo "Warning: Empty target location for $app_name. Skipping."
        fi
    done <<< "$release_content"
fi
----
TASK [IBPS-deployment : Run deploy on Target Server] ***************************
task path: /ansible/GITHUB_RUNNER/actions-runner10/_work/ibps-was-ansible-cd/ibps-was-ansible-cd/roles/IBPS-deployment/tasks/main.yml:34
<10.15.13.148> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.13.148> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a 10.15.13.148 '/bin/sh -c '"'"'( umask 77 && mkdir -p "` echo /tmp `"&& mkdir /tmp/ansible-tmp-1706351808.2692235-1375630-209463731716650 && echo ansible-tmp-1706351808.2692235-1375630-209463731716650="` echo /tmp/ansible-tmp-1706351808.2692235-1375630-209463731716650 `" ) && sleep 0'"'"''
<10.15.13.148> (0, b'ansible-tmp-1706351808.2692235-1375630-209463731716650=/tmp/ansible-tmp-1706351808.2692235-1375630-209463731716650\n', b'')
Using module file /usr/lib/python3.6/site-packages/ansible/modules/commands/command.py
<10.15.13.148> PUT /home/itdevtra/.ansible/tmp/ansible-local-13755309kcwn18w/tmpqpxcveie TO /tmp/ansible-tmp-1706351808.2692235-1375630-209463731716650/AnsiballZ_command.py
<10.15.13.148> SSH: EXEC sftp -b - -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a '[10.15.13.148]'
<10.15.13.148> (0, b'sftp> put /home/itdevtra/.ansible/tmp/ansible-local-13755309kcwn18w/tmpqpxcveie /tmp/ansible-tmp-1706351808.2692235-1375630-209463731716650/AnsiballZ_command.py\n', b'')
<10.15.13.148> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.13.148> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a 10.15.13.148 '/bin/sh -c '"'"'chmod u+x /tmp/ansible-tmp-1706351808.2692235-1375630-209463731716650/ /tmp/ansible-tmp-1706351808.2692235-1375630-209463731716650/AnsiballZ_command.py && sleep 0'"'"''
<10.15.13.148> (0, b'', b'')
<10.15.13.148> ESTABLISH SSH CONNECTION FOR USER: itdevtra
<10.15.13.148> SSH: EXEC ssh -C -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o Port=22 -o KbdInteractiveAuthentication=no -o PreferredAuthentications=gssapi-with-mic,gssapi-keyex,hostbased,publickey -o PasswordAuthentication=no -o 'User="itdevtra"' -o ConnectTimeout=30 -o ControlPath=/home/itdevtra/.ansible/cp/2b6c10444a -tt 10.15.13.148 '/bin/sh -c '"'"'/usr/bin/python /tmp/ansible-tmp-1706351808.2692235-1375630-209463731716650/AnsiballZ_command.py && sleep 0'"'"''
