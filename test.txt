I have to download the release.zip file from github packages 
release.zip file contains application files that is can be jar/war/ear and release.txt file
release.txt file contains application file name and its targeted location 
i have to copy the th application files into its targeted location
so i am using deploy.sh script for the above activities

#cd "$(dirname "$0")"
process_line() {
  local filename
  local destination
  
  # Split the line into filename and destination using a comma as the delimiter 
  IFS=',' read -r filename destination <<< "$1"

  # Perform actions based on the values
  echo "Deploying $filename to $destination"

  # Check if either the filename or destination is empty
  if [ -z "$filename" ] || [ -z "$destination" ]; then
    echo "Error: Empty filename or destination in line: $1"
    return
  fi

  # Backup the existing file or directory at the destination
  if [ -e "$destination" ]; then
    backup_dir="/ibm/IBM-CAS/BACKUP_RELEASE"
    mkdir -p "$backup_dir"
    backup_file="$backup_dir/$(basename "$destination")_backup_$(date +'%Y%m%d%H%M%S')"
    mv "$destination" "$backup_file"
    echo "Backed up $destination to $backup_file"

    # Add the backup details to the change.log file
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Backed up $destination to $backup_file" >> change.log
  else
    echo "File or directory $destination not found, skipping backup"
  fi

  # Download the ZIP file from GitHub Packages using curl
  # Replace GITHUB_TOKEN with your GitHub token or credentials
  curl -H "Authorization: token TOKEN_GITHUB" -o "$filename" -L "https://maven.pkg.github.com/rakbank-internal/IBPS-Deployment/$filename"

  if [ $? -eq 0 ]; then
    echo "Downloaded $filename from GitHub Packages"

    # Unzip the file
    unzip -q "$filename" -d "$destination"

    if [ $? -eq 0 ]; then
      echo "Extracted and deployed $filename to $destination"
    else
      echo "Error extracting and deploying $filename to $destination"
    fi

    # Add the deployment details to the change.log file
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Deployed $filename to $destination" >> change.log
  else
    echo "Error downloading $filename from GitHub Packages"
  fi
}

# Check if the release.txt file exists
if [ -e "release.txt" ]; then
  # Read each line from the release.txt file
  while IFS= read -r line; do
    # Skip empty lines and lines starting with #
    if [[ -n "$line" && "$line" != "#"* ]]; then
      process_line "$line"
    fi
  done < "release.txt"
else
  echo "release.txt file not found"
fi
=======================
but getting error
TASK [IBPS-deployment : Deploy Application] ************************************
task path: /ansible/GITHUB_RUNNER/actions-runner10/_work/IBPS-Deployment/IBPS-Deployment/roles/IBPS-deployment/tasks/main.yml:2
<localhost> ESTABLISH LOCAL CONNECTION FOR USER: itdevtra
<localhost> EXEC /bin/sh -c '( umask 77 && mkdir -p "` echo /tmp `"&& mkdir /tmp/ansible-tmp-1704955298.5833302-1790468-68825460196919 && echo ansible-tmp-1704955298.5833302-1790468-68825460196919="` echo /tmp/ansible-tmp-1704955298.5833302-1790468-68825460196919 `" ) && sleep 0'
Using module file /usr/lib/python3.6/site-packages/ansible/modules/commands/command.py
<localhost> PUT /home/itdevtra/.ansible/tmp/ansible-local-17904397v9gxoi_/tmpmeuz_vn6 TO /tmp/ansible-tmp-1704955298.5833302-1790468-68825460196919/AnsiballZ_command.py
<localhost> EXEC /bin/sh -c 'chmod u+x /tmp/ansible-tmp-1704955298.5833302-1790468-68825460196919/ /tmp/ansible-tmp-1704955298.5833302-1790468-68825460196919/AnsiballZ_command.py && sleep 0'
<localhost> EXEC /bin/sh -c '/usr/libexec/platform-python /tmp/ansible-tmp-1704955298.5833302-1790468-68825460196919/AnsiballZ_command.py && sleep 0'
<localhost> EXEC /bin/sh -c 'rm -f -r /tmp/ansible-tmp-1704955298.5833302-1790468-68825460196919/ > /dev/null 2>&1 && sleep 0'
changed: [ANT3CASAPPS01 -> localhost] => {
    "changed": true,
    "cmd": "cd /ansible/GITHUB_RUNNER/actions-runner10/_work/IBPS-Deployment/IBPS-Deployment && ./deploy.sh",
    "delta": "0:00:01.094210",
    "end": "2024-01-11 10:41:40.072301",
    "invocation": {
        "module_args": {
            "_raw_params": "cd /ansible/GITHUB_RUNNER/actions-runner10/_work/IBPS-Deployment/IBPS-Deployment && ./deploy.sh",
            "_uses_shell": true,
            "argv": null,
            "chdir": null,
            "creates": null,
            "executable": null,
            "removes": null,
            "stdin": null,
            "stdin_add_newline": true,
            "strip_empty_ends": true,
            "warn": false
        }
    },
    "rc": 0,
    "start": "2024-01-11 10:41:38.978091",
    "stderr": "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    28  100    28    0     0     26      0  0:00:01  0:00:01 --:--:--    26\n[newgenapp_jar.ear]\n  End-of-central-directory signature not found.  Either this file is not\n  a zipfile, or it constitutes one disk of a multi-part archive.  In the\n  latter case the central directory and zipfile comment will be found on\n  the last disk(s) of this archive.\nunzip:  cannot find zipfile directory in one of newgenapp_jar.ear or\n        newgenapp_jar.ear.zip, and cannot find newgenapp_jar.ear.ZIP, period.",
    "stderr_lines": [
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
        "                                 Dload  Upload   Total   Spent    Left  Speed",
        "",
        "  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "100    28  100    28    0     0     26      0  0:00:01  0:00:01 --:--:--    26",
        "[newgenapp_jar.ear]",
        "  End-of-central-directory signature not found.  Either this file is not",
        "  a zipfile, or it constitutes one disk of a multi-part archive.  In the",
        "  latter case the central directory and zipfile comment will be found on",
        "  the last disk(s) of this archive.",
        "unzip:  cannot find zipfile directory in one of newgenapp_jar.ear or",
        "        newgenapp_jar.ear.zip, and cannot find newgenapp_jar.ear.ZIP, period."
    ],
    "stdout": "Deploying newgenapp_jar.ear to /ibm/IBM-CAS/WebSphere/AppServer/profiles/AppSrv01/installedApps/ANT2CASAPPS01Node01Cell\nFile or directory /ibm/IBM-CAS/WebSphere/AppServer/profiles/AppSrv01/installedApps/ANT2CASAPPS01Node01Cell not found, skipping backup\nDownloaded newgenapp_jar.ear from GitHub Packages\nError extracting and deploying newgenapp_jar.ear to /ibm/IBM-CAS/WebSphere/AppServer/profiles/AppSrv01/installedApps/ANT2CASAPPS01Node01Cell",
    "stdout_lines": [
        "Deploying newgenapp_jar.ear to /ibm/IBM-CAS/WebSphere/AppServer/profiles/AppSrv01/installedApps/ANT2CASAPPS01Node01Cell",
        "File or directory /ibm/IBM-CAS/WebSphere/AppServer/profiles/AppSrv01/installedApps/ANT2CASAPPS01Node01Cell not found, skipping backup",
        "Downloaded newgenapp_jar.ear from GitHub Packages",
        "Error extracting and deploying newgenapp_jar.ear to /ibm/IBM-CAS/WebSphere/AppServer/profiles/AppSrv01/installedApps/ANT2CASAPPS01Node01Cell"
    ]
}
=================================

#!/bin/bash

# Specify the GitHub token
GITHUB_TOKEN="YOUR_GITHUB_TOKEN_HERE"

# Specify the GitHub Packages URL for release.zip
PACKAGE_URL="https://maven.pkg.github.com/rakbank-internal/IBPS-Deployment/release.zip"

# Download release.zip from GitHub Packages
curl -H "Authorization: token $GITHUB_TOKEN" -o release.zip -L "$PACKAGE_URL"

if [ $? -eq 0 ]; then
  echo "Downloaded release.zip from GitHub Packages"

  # Extract the contents of release.zip to a temporary directory
  temp_dir=$(mktemp -d)
  unzip -q release.zip -d "$temp_dir"

  if [ $? -eq 0 ]; then
    echo "Extracted contents to $temp_dir"

    # Process release.txt to deploy application files
    while IFS=',' read -r filename destination; do
      # Skip empty lines and lines starting with #
      if [[ -n "$filename" && -n "$destination" && "$filename" != "#"* ]]; then
        process_line "$filename" "$destination"
      fi
    done < "$temp_dir/release.txt"

    # Remove the temporary directory
    rm -r "$temp_dir"
  else
    echo "Error extracting release.zip. Check if the ZIP file is valid."
  fi
else
  echo "Error downloading release.zip from GitHub Packages"
fi

# Define the process_line function (as per your original script)
process_line() {
  local filename="$1"
  local destination="$2"

  # Perform actions based on the values
  echo "Deploying $filename to $destination"

  # Check if either the filename or destination is empty
  if [ -z "$filename" ] || [ -z "$destination" ]; then
    echo "Error: Empty filename or destination."
    return
  fi

  # Backup the existing file or directory at the destination
  if [ -e "$destination" ]; then
    backup_dir="/ibm/IBM-CAS/BACKUP_RELEASE"
    mkdir -p "$backup_dir"
    backup_file="$backup_dir/$(basename "$destination")_backup_$(date +'%Y%m%d%H%M%S')"
    mv "$destination" "$backup_file"
    echo "Backed up $destination to $backup_file"

    # Add the backup details to the change.log file
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Backed up $destination to $backup_file" >> change.log
  else
    echo "File or directory $destination not found, skipping backup"
  fi

  # Check if the file is a valid ZIP file before attempting to extract
  if [[ "$filename" == *.zip ]]; then
    # Unzip the file
    unzip -q "$filename" -d "$destination"

    if [ $? -eq 0 ]; then
      echo "Extracted and deployed $filename to $destination"
    else
      echo "Error extracting and deploying $filename to $destination"
    fi
  else
    echo "Skipping extraction. $filename is not a ZIP file."
  fi

  # Add the deployment details to the change.log file
  echo "$(date +'%Y-%m-%d %H:%M:%S') - Deployed $filename to $destination" >> change.log
}
============================
TASK [IBPS-deployment : Deploy Application] ************************************
task path: /ansible/GITHUB_RUNNER/actions-runner10/_work/IBPS-Deployment/IBPS-Deployment/roles/IBPS-deployment/tasks/main.yml:2
<localhost> ESTABLISH LOCAL CONNECTION FOR USER: itdevtra
<localhost> EXEC /bin/sh -c '( umask 77 && mkdir -p "` echo /tmp `"&& mkdir /tmp/ansible-tmp-1704961956.8221076-1831857-122567446756535 && echo ansible-tmp-1704961956.8221076-1831857-122567446756535="` echo /tmp/ansible-tmp-1704961956.8221076-1831857-122567446756535 `" ) && sleep 0'
Using module file /usr/lib/python3.6/site-packages/ansible/modules/commands/command.py
<localhost> PUT /home/itdevtra/.ansible/tmp/ansible-local-1831832ktdhyffh/tmpefwogcu3 TO /tmp/ansible-tmp-1704961956.8221076-1831857-122567446756535/AnsiballZ_command.py
<localhost> EXEC /bin/sh -c 'chmod u+x /tmp/ansible-tmp-1704961956.8221076-1831857-122567446756535/ /tmp/ansible-tmp-1704961956.8221076-1831857-122567446756535/AnsiballZ_command.py && sleep 0'
<localhost> EXEC /bin/sh -c '/usr/libexec/platform-python /tmp/ansible-tmp-1704961956.8221076-1831857-122567446756535/AnsiballZ_command.py && sleep 0'
<localhost> EXEC /bin/sh -c 'rm -f -r /tmp/ansible-tmp-1704961956.8221076-1831857-122567446756535/ > /dev/null 2>&1 && sleep 0'
changed: [ANT3CASAPPS01 -> localhost] => {
    "changed": true,
    "cmd": "cd /ansible/GITHUB_RUNNER/actions-runner10/_work/IBPS-Deployment/IBPS-Deployment && ./deploy.sh",
    "delta": "0:00:00.894027",
    "end": "2024-01-11 12:32:38.103831",
    "invocation": {
        "module_args": {
            "_raw_params": "cd /ansible/GITHUB_RUNNER/actions-runner10/_work/IBPS-Deployment/IBPS-Deployment && ./deploy.sh",
            "_uses_shell": true,
            "argv": null,
            "chdir": null,
            "creates": null,
            "executable": null,
            "removes": null,
            "stdin": null,
            "stdin_add_newline": true,
            "strip_empty_ends": true,
            "warn": false
        }
    },
    "rc": 0,
    "start": "2024-01-11 12:32:37.209804",
    "stderr": "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    28  100    28    0     0     32      0 --:--:-- --:--:-- --:--:--    32\n[release.zip]\n  End-of-central-directory signature not found.  Either this file is not\n  a zipfile, or it constitutes one disk of a multi-part archive.  In the\n  latter case the central directory and zipfile comment will be found on\n  the last disk(s) of this archive.\nunzip:  cannot find zipfile directory in one of release.zip or\n        release.zip.zip, and cannot find release.zip.ZIP, period.",
    "stderr_lines": [
        "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current",
        "                                 Dload  Upload   Total   Spent    Left  Speed",
        "",
        "  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0",
        "100    28  100    28    0     0     32      0 --:--:-- --:--:-- --:--:--    32",
        "[release.zip]",
        "  End-of-central-directory signature not found.  Either this file is not",
        "  a zipfile, or it constitutes one disk of a multi-part archive.  In the",
        "  latter case the central directory and zipfile comment will be found on",
        "  the last disk(s) of this archive.",
        "unzip:  cannot find zipfile directory in one of release.zip or",
        "        release.zip.zip, and cannot find release.zip.ZIP, period."
    ],
    "stdout": "Downloaded release.zip from GitHub Packages\nError extracting release.zip. Check if the ZIP file is valid.",
    "stdout_lines": [
        "Downloaded release.zip from GitHub Packages",
        "Error extracting release.zip. Check if the ZIP file is valid."
    ]
}
==========================

#!/bin/bash

# Log file to keep track of deployments and backups
CHANGE_LOG="change.log"

# Backup directory
BACKUP_DIR="/ibm/IBM-CAS/BACKUP_RELEASE"

process_line() {
  local filename
  local destination

  # Split the line into filename and destination using a comma as the delimiter
  IFS=',' read -r filename destination <<< "$1"

  # Check if either the filename or destination is empty
  if [ -z "$filename" ] || [ -z "$destination" ]; then
    echo "Error: Empty filename or destination in line: $1"
    return
  fi

  # Full path to the destination directory
  full_destination="$destination"

  # Backup the existing file or directory at the destination
  if [ -e "$full_destination" ]; then
    mkdir -p "$BACKUP_DIR"
    backup_file="$BACKUP_DIR/$(basename "$full_destination")_backup_$(date +'%Y%m%d%H%M%S')"
    mv "$full_destination" "$backup_file"
    echo "Backed up $full_destination to $backup_file"

    # Add the backup details to the change.log file
    echo "$(date +'%Y-%m-%d %H:%M:%S') - Backed up $full_destination to $backup_file" >> "$CHANGE_LOG"
  else
    echo "File or directory $full_destination not found, skipping backup"
  fi

  # Download the ZIP file from GitHub Packages using curl
  curl -sSL -H "Authorization: token $GITHUB_TOKEN" -o "$filename" "$GITHUB_REPO/$filename"

  if [ $? -eq 0 ]; then
    echo "Downloaded $filename from GitHub Packages"

    # Unzip the file
    unzip -q "$filename" -d "$(dirname "$full_destination")"

    if [ $? -eq 0 ]; then
      echo "Extracted and deployed $filename to $(dirname "$full_destination")"

      # Add the deployment details to the change.log file
      echo "$(date +'%Y-%m-%d %H:%M:%S') - Deployed $filename to $(dirname "$full_destination")" >> "$CHANGE_LOG"
    else
      echo "Error extracting and deploying $filename to $(dirname "$full_destination")"
    fi
  else
    echo "Error downloading $filename from GitHub Packages"
  fi
}

# Check if the release.txt file exists
if [ -e "release.txt" ]; then
  # Read each line from the release.txt file
  while IFS= read -r line; do
    # Skip empty lines and lines starting with #
    if [[ -n "$line" && "$line" != "#"* ]]; then
      process_line "$line"
    fi
  done < "release.txt"
else
  echo "release.txt file not found"
fi
==================
curl -sSL -H "Authorization: token $GITHUB_TOKEN" -o "$filename" "https://maven.pkg.github.com/rakbank-internal/IBPS-Deployment/Rak/IBPS/release/1.0.0/release-1.0.0.zip"
