Profile_home="$1"
release_version="$2"
zip_file_url="$3"
zip_file_name="$4"

# Extract the zip file to a new release directory
unzip -q "$Profile_home/release-$release_version/$zip_file_name" -d "$Profile_home/release-$release_version"

# Check if release.txt exists
release_txt_path="$Profile_home/release-$release_version/release/release.txt"
if [ ! -f "$release_txt_path" ]; then
    echo "Error: release.txt not found at $release_txt_path"
    exit 1
fi

# Read the content of release.txt and remove any leading/trailing whitespace characters
release_content=$(sed 's/^[[:space:]]*//;s/[[:space:]]*$//' "$release_txt_path" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Backup old deployment files for each application with timestamp
if [ -n "$release_content" ]; then
    backup_location="$Profile_home/release-$release_version"
    backup_timestamp=$(date +'%Y%m%d%H%M%S')
    backup_directory="$backup_location/backup-$backup_timestamp"
    mkdir -p "$backup_directory"
    chmod 777 "$backup_directory"

    # Copy release.txt file into backup directory
    cp "$release_txt_path" "$backup_directory"

    # Iterate through each line in release_content
    while IFS=, read -r app_name app_targeted_location; do
        # Check if both app_name and app_targeted_location are not empty
        if [ -n "$app_name" ] && [ -n "$app_targeted_location" ]; then
            # Construct paths for old deployment files and backup location
            old_deployment_path="$app_targeted_location"
            backup_path="$backup_directory/$app_name"

            # Copy old deployment files to backup location
            cp -r "$old_deployment_path" "$backup_path"

            # Print information about the backup
            echo "Backup: $app_name - $old_deployment_path -> $backup_path"

            # Define paths for new deployment files and targeted location
            new_deployment_path="$Profile_home/release-$release_version/release/$app_name"  # Assuming the new files are in the release directory

            # Copy new deployment files to targeted location
            cp -r "$new_deployment_path" "$app_targeted_location"

            # Print information about the copy
            echo "Copy: $app_name - $new_deployment_path -> $app_targeted_location"
        fi
    done <<< "$release_content"
fi

ls -la "/ibm/IBM-CAS/WebSphere/targeted_location7"
===========================
#!/bin/bash

Profile_home="$1"
release_version="$2"

# Construct the path to the backup directory
backup_location="$Profile_home/release-$release_version"
latest_backup=$(ls -td "$backup_location"/backup-* | head -n 1)

if [ -z "$latest_backup" ]; then
    echo "No backup directories found."
    exit 1
fi

echo "Latest backup directory: $latest_backup"

# List the contents of the latest backup directory
ls -la "$latest_backup"

# Read the content of release.txt and remove any leading/trailing whitespace characters
release_content=$(sed 's/^[[:space:]]*//;s/[[:space:]]*$//' "$latest_backup/release.txt" 2>/dev/null)

# Print the content of release_content
echo "$release_content"

# Check if release_content is not empty
if [ -n "$release_content" ]; then
    # Iterate through each line in release.txt
    while IFS=, read -r app_name app_targeted_location; do
        # Check if both app_name and app_targeted_location are not empty
        if [ -n "$app_name" ] && [ -n "$app_targeted_location" ]; then
            # Log the targeted path
            echo "Targeted location for $app_name: $app_targeted_location"

            # Define paths for old deployment files and backup location
            old_deployment_path="$latest_backup/$app_name"

            # Copy files from backup to targeted location
            cp -r "$old_deployment_path" "$app_targeted_location"

            # Print information about the copy
            echo "Copy: $app_name - $old_deployment_path -> $app_targeted_location"
        fi
    done <<< "$release_content"
else
    echo "No content found in release.txt."
fi

#ls -la "/ibm/IBM-CAS/WebSphere"
ls -la "/ibm/IBM-CAS/WebSphere/targeted_location7"
